<%@ jet 
    package="org.xmdl.core.templates.model.impl" 
    imports="java.util.* 
            org.xmdl.xmdl.*
            org.xmdl.gen.util.*
            org.eclipse.emf.codegen.util.*"
    class="EntitySearchImplTemplateImpl" 
%><%
    XClass xClass = (XClass) argument;
    XPackage xPackage = xClass.getXPackage(); 
    ClassHelper helper = XMDLClassHelper.INSTANCE;
    org.apache.log4j.Logger.getLogger(getClass()).debug(" generate ");    
    %>
<%ImportManager importManager=null;%>
<%if (helper.getQualifiedName(xPackage) != null) {%>
<%importManager = helper.makeImportManager(helper.getQualifiedName(xPackage));%>
package <%=helper.getQualifiedName(xPackage)%>.model.impl;
<%} else {%>
<%importManager = helper.makeImportManager("");%>
<%}%>
<%
importManager.addImport("java.util.*");
importManager.addImport("org.xmdl.lib.dao.*");
importManager.addImport(helper.getQualifiedName(xPackage) + ".model.*");
    
    StringBuffer importStringBuffer = stringBuffer;
    int importInsertionPoint = stringBuffer.length();
    importManager.addCompilationUnitImports(stringBuffer.toString());
%>
/**
 * Search bean implementation for <%=helper.getCapName(xClass)%>  
 * @generated
 */
public class <%=helper.getCapName(xClass)%>SearchImpl
        extends AbstractSearchBean implements <%=helper.getCapName(xClass)%>Search {
 
    /**
     * @generated
     */
    public <%=helper.getCapName(xClass)%>SearchImpl() { }
    
<%for (Iterator<XAttribute> i= xClass.getAttributes().iterator(); i.hasNext();) {
    XAttribute attribute = (XAttribute) i.next();%>
	<%if (attribute.getType() != null && !attribute.isReference()) {%>
	<%	XType type = attribute.getType();
		boolean comparable = type.isComparable();
		if (comparable) {
	%>
    /** 
     * @generated
     */
    private <%=helper.getImportedAttributeType(attribute)%> <%=helper.uncapSafeName(attribute)%>Min = <%=helper.getDefaultValue(attribute)%>;

    /** 
     * @generated
     */
    private <%=helper.getImportedAttributeType(attribute)%> <%=helper.uncapSafeName(attribute)%>Max = <%=helper.getDefaultValue(attribute)%>;
	<%  } else {  %>
    /** 
     * @generated
     */
    private <%=helper.getImportedAttributeType(attribute)%> <%=helper.uncapSafeName(attribute)%> = <%=helper.getDefaultValue(attribute)%>;
	<%  }  %>
<%}%>
<%}%>
    
 
<%for (Iterator<XAttribute> i= xClass.getAttributes().iterator(); i.hasNext();) {
    XAttribute attribute = (XAttribute) i.next();%>
	<%if (attribute.getType() != null && !attribute.isReference()) {%>
	<%	XType type = attribute.getType();
		boolean comparable = type.isComparable();
		if (comparable) {
	%>

    /**
     * @generated
     */
    public <%=helper.getImportedAttributeType(attribute)%> <%=helper.getGetAccessor(attribute)%>Min() {
        return <%=helper.uncapSafeName(attribute)%>Min;
    }

    /**
     * @generated
     */
    public void set<%=helper.getAccessorName(attribute)%>Min(<%=helper.getImportedAttributeType(attribute)%> new<%=helper.getCapName(attribute)%>Min)    {
        this.<%=helper.uncapSafeName(attribute)%>Min = new<%=helper.getCapName(attribute)%>Min;
    }

    /**
     * @generated
     */
    public <%=helper.getImportedAttributeType(attribute)%> <%=helper.getGetAccessor(attribute)%>Max() {
        return <%=helper.uncapSafeName(attribute)%>Max;
    }

    /**
     * @generated
     */
    public void set<%=helper.getAccessorName(attribute)%>Max(<%=helper.getImportedAttributeType(attribute)%> new<%=helper.getCapName(attribute)%>Max)    {
        this.<%=helper.uncapSafeName(attribute)%>Max = new<%=helper.getCapName(attribute)%>Max;
    }

	<%} else {%>
	
    /**
     * @generated
     */
    public <%=helper.getImportedAttributeType(attribute)%> <%=helper.getGetAccessor(attribute)%>() {
        return <%=helper.uncapSafeName(attribute)%>;
    }

    /**
     * @generated
     */
    public void set<%=helper.getAccessorName(attribute)%>(<%=helper.getImportedAttributeType(attribute)%> new<%=helper.getCapName(attribute)%>)    {
        this.<%=helper.uncapSafeName(attribute)%> = new<%=helper.getCapName(attribute)%>;
    }
	
	<%}%>
<%}//if (attribute.getType() !=null%>
<%}//for%>

} //<%=helper.getCapName(xClass)%>
<%importStringBuffer.insert(importInsertionPoint, importManager.computeSortedImports());%>