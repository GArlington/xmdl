/*
* generated by Xtext
*/
grammar InternalWDL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xmdl.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xmdl.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xmdl.services.WDLGrammarAccess;

}

@parser::members {
 
 	private WDLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(WDLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

}




// Entry rule entryRuleModel
entryRuleModel :
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getModelAccess().getTypesAssignment()); }
(rule__Model__TypesAssignment)*
{ after(grammarAccess.getModelAccess().getTypesAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType :
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleType
entryRuleSimpleType :
{ before(grammarAccess.getSimpleTypeRule()); }
	 ruleSimpleType
{ after(grammarAccess.getSimpleTypeRule()); } 
	 EOF 
;

// Rule SimpleType
ruleSimpleType 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getSimpleTypeAccess().getGroup()); }
(rule__SimpleType__Group__0)
{ after(grammarAccess.getSimpleTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJAVAID
entryRuleJAVAID :
{ before(grammarAccess.getJAVAIDRule()); }
	 ruleJAVAID
{ after(grammarAccess.getJAVAIDRule()); } 
	 EOF 
;

// Rule JAVAID
ruleJAVAID 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getJAVAIDAccess().getGroup()); }
(rule__JAVAID__Group__0)
{ after(grammarAccess.getJAVAIDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEntity
entryRuleEntity :
{ before(grammarAccess.getEntityRule()); }
	 ruleEntity
{ after(grammarAccess.getEntityRule()); } 
	 EOF 
;

// Rule Entity
ruleEntity 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getEntityAccess().getGroup()); }
(rule__Entity__Group__0)
{ after(grammarAccess.getEntityAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttribute
entryRuleAttribute :
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getAttributeAccess().getGroup()); }
(rule__Attribute__Group__0)
{ after(grammarAccess.getAttributeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnum
entryRuleEnum :
{ before(grammarAccess.getEnumRule()); }
	 ruleEnum
{ after(grammarAccess.getEnumRule()); } 
	 EOF 
;

// Rule Enum
ruleEnum 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getEnumAccess().getGroup()); }
(rule__Enum__Group__0)
{ after(grammarAccess.getEnumAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumLiteral
entryRuleEnumLiteral :
{ before(grammarAccess.getEnumLiteralRule()); }
	 ruleEnumLiteral
{ after(grammarAccess.getEnumLiteralRule()); } 
	 EOF 
;

// Rule EnumLiteral
ruleEnumLiteral 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getEnumLiteralAccess().getGroup()); }
(rule__EnumLiteral__Group__0)
{ after(grammarAccess.getEnumLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEmbed
entryRuleEmbed :
{ before(grammarAccess.getEmbedRule()); }
	 ruleEmbed
{ after(grammarAccess.getEmbedRule()); } 
	 EOF 
;

// Rule Embed
ruleEmbed 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getEmbedAccess().getGroup()); }
(rule__Embed__Group__0)
{ after(grammarAccess.getEmbedAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEntityBody
entryRuleEntityBody :
{ before(grammarAccess.getEntityBodyRule()); }
	 ruleEntityBody
{ after(grammarAccess.getEntityBodyRule()); } 
	 EOF 
;

// Rule EntityBody
ruleEntityBody 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getEntityBodyAccess().getGroup()); }
(rule__EntityBody__Group__0)
{ after(grammarAccess.getEntityBodyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getSimpleTypeParserRuleCall_0()); }
	ruleSimpleType
{ after(grammarAccess.getTypeAccess().getSimpleTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getEntityParserRuleCall_1()); }
	ruleEntity
{ after(grammarAccess.getTypeAccess().getEntityParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getEnumParserRuleCall_2()); }
	ruleEnum
{ after(grammarAccess.getTypeAccess().getEnumParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getEmbedParserRuleCall_3()); }
	ruleEmbed
{ after(grammarAccess.getTypeAccess().getEmbedParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__SimpleType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeAccess().getTypeKeyword_0()); }

	'type' 

{ after(grammarAccess.getSimpleTypeAccess().getTypeKeyword_0()); }
)

	rule__SimpleType__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeAccess().getNameAssignment_1()); }
(rule__SimpleType__NameAssignment_1)
{ after(grammarAccess.getSimpleTypeAccess().getNameAssignment_1()); }
)

	rule__SimpleType__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeAccess().getGroup_2()); }
(rule__SimpleType__Group_2__0)?
{ after(grammarAccess.getSimpleTypeAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SimpleType__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeAccess().getIsKeyword_2_0()); }

	'is' 

{ after(grammarAccess.getSimpleTypeAccess().getIsKeyword_2_0()); }
)

	rule__SimpleType__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleType__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeAccess().getMappedTypeAssignment_2_1()); }
(rule__SimpleType__MappedTypeAssignment_2_1)
{ after(grammarAccess.getSimpleTypeAccess().getMappedTypeAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__JAVAID__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJAVAIDAccess().getNameAssignment_0()); }
(rule__JAVAID__NameAssignment_0)
{ after(grammarAccess.getJAVAIDAccess().getNameAssignment_0()); }
)

	rule__JAVAID__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__JAVAID__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJAVAIDAccess().getGroup_1()); }
(rule__JAVAID__Group_1__0)*
{ after(grammarAccess.getJAVAIDAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__JAVAID__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJAVAIDAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getJAVAIDAccess().getFullStopKeyword_1_0()); }
)

	rule__JAVAID__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__JAVAID__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJAVAIDAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getJAVAIDAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Entity__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getEntityKeyword_0()); }

	'entity' 

{ after(grammarAccess.getEntityAccess().getEntityKeyword_0()); }
)

	rule__Entity__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Entity__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityAccess().getEntityBodyParserRuleCall_1()); }
	ruleEntityBody
{ after(grammarAccess.getEntityAccess().getEntityBodyParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Attribute__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getTypeAssignment_0()); }
(rule__Attribute__TypeAssignment_0)
{ after(grammarAccess.getAttributeAccess().getTypeAssignment_0()); }
)

	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getManyAssignment_1()); }
(rule__Attribute__ManyAssignment_1)?
{ after(grammarAccess.getAttributeAccess().getManyAssignment_1()); }
)

	rule__Attribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getNameAssignment_2()); }
(rule__Attribute__NameAssignment_2)
{ after(grammarAccess.getAttributeAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Enum__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getEnumKeyword_0()); }

	'enum' 

{ after(grammarAccess.getEnumAccess().getEnumKeyword_0()); }
)

	rule__Enum__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getNameAssignment_1()); }
(rule__Enum__NameAssignment_1)
{ after(grammarAccess.getEnumAccess().getNameAssignment_1()); }
)

	rule__Enum__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getEnumAccess().getLeftCurlyBracketKeyword_2()); }
)

	rule__Enum__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getLiteralsAssignment_3()); }
(rule__Enum__LiteralsAssignment_3)*
{ after(grammarAccess.getEnumAccess().getLiteralsAssignment_3()); }
)

	rule__Enum__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__Enum__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getEnumAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EnumLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumLiteralAccess().getNameAssignment_0()); }
(rule__EnumLiteral__NameAssignment_0)
{ after(grammarAccess.getEnumLiteralAccess().getNameAssignment_0()); }
)

	rule__EnumLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumLiteralAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getEnumLiteralAccess().getLeftParenthesisKeyword_1()); }
)

	rule__EnumLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumLiteralAccess().getOrdinalAssignment_2()); }
(rule__EnumLiteral__OrdinalAssignment_2)
{ after(grammarAccess.getEnumLiteralAccess().getOrdinalAssignment_2()); }
)

	rule__EnumLiteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumLiteral__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumLiteralAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getEnumLiteralAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Embed__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmbedAccess().getEmbedKeyword_0()); }

	'embed' 

{ after(grammarAccess.getEmbedAccess().getEmbedKeyword_0()); }
)

	rule__Embed__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Embed__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEmbedAccess().getEntityBodyParserRuleCall_1()); }
	ruleEntityBody
{ after(grammarAccess.getEmbedAccess().getEntityBodyParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EntityBody__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityBodyAccess().getNameAssignment_0()); }
(rule__EntityBody__NameAssignment_0)
{ after(grammarAccess.getEntityBodyAccess().getNameAssignment_0()); }
)

	rule__EntityBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__EntityBody__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityBodyAccess().getGroup_1()); }
(rule__EntityBody__Group_1__0)?
{ after(grammarAccess.getEntityBodyAccess().getGroup_1()); }
)

	rule__EntityBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__EntityBody__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityBodyAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getEntityBodyAccess().getLeftCurlyBracketKeyword_2()); }
)

	rule__EntityBody__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__EntityBody__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityBodyAccess().getAttributesAssignment_3()); }
(rule__EntityBody__AttributesAssignment_3)*
{ after(grammarAccess.getEntityBodyAccess().getAttributesAssignment_3()); }
)

	rule__EntityBody__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__EntityBody__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityBodyAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getEntityBodyAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EntityBody__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityBodyAccess().getExtendsKeyword_1_0()); }

	'extends' 

{ after(grammarAccess.getEntityBodyAccess().getExtendsKeyword_1_0()); }
)

	rule__EntityBody__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__EntityBody__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityBodyAccess().getSuperEntityAssignment_1_1()); }
(rule__EntityBody__SuperEntityAssignment_1_1)
{ after(grammarAccess.getEntityBodyAccess().getSuperEntityAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Model__TypesAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getTypesTypeParserRuleCall_0()); }
	ruleType{ after(grammarAccess.getModelAccess().getTypesTypeParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getSimpleTypeAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__MappedTypeAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeAccess().getMappedTypeJAVAIDParserRuleCall_2_1_0()); }
	ruleJAVAID{ after(grammarAccess.getSimpleTypeAccess().getMappedTypeJAVAIDParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JAVAID__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJAVAIDAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getJAVAIDAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getTypeTypeCrossReference_0_0()); }
(
{ before(grammarAccess.getAttributeAccess().getTypeTypeIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getAttributeAccess().getTypeTypeIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getAttributeAccess().getTypeTypeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__ManyAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getManyAsteriskKeyword_1_0()); }
(
{ before(grammarAccess.getAttributeAccess().getManyAsteriskKeyword_1_0()); }

	'*' 

{ after(grammarAccess.getAttributeAccess().getManyAsteriskKeyword_1_0()); }
)

{ after(grammarAccess.getAttributeAccess().getManyAsteriskKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getEnumAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enum__LiteralsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumAccess().getLiteralsEnumLiteralParserRuleCall_3_0()); }
	ruleEnumLiteral{ after(grammarAccess.getEnumAccess().getLiteralsEnumLiteralParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumLiteral__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumLiteralAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getEnumLiteralAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumLiteral__OrdinalAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumLiteralAccess().getOrdinalINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getEnumLiteralAccess().getOrdinalINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EntityBody__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityBodyAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getEntityBodyAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EntityBody__SuperEntityAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityBodyAccess().getSuperEntityEntityCrossReference_1_1_0()); }
(
{ before(grammarAccess.getEntityBodyAccess().getSuperEntityEntityIDTerminalRuleCall_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getEntityBodyAccess().getSuperEntityEntityIDTerminalRuleCall_1_1_0_1()); }
)
{ after(grammarAccess.getEntityBodyAccess().getSuperEntityEntityCrossReference_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EntityBody__AttributesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntityBodyAccess().getAttributesAttributeParserRuleCall_3_0()); }
	ruleAttribute{ after(grammarAccess.getEntityBodyAccess().getAttributesAttributeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


