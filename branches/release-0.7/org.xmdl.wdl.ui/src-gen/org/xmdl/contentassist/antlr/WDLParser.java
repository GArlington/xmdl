/*
* generated by Xtext
*/
package org.xmdl.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.CharStream;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xmdl.services.WDLGrammarAccess;

public class WDLParser extends AbstractContentAssistParser {
	
	@Inject
	private WDLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xmdl.contentassist.antlr.internal.InternalWDLLexer createLexer(CharStream stream) {
		return new org.xmdl.contentassist.antlr.internal.InternalWDLLexer(stream);
	}
	
	@Override
	protected org.xmdl.contentassist.antlr.internal.InternalWDLParser createParser() {
		org.xmdl.contentassist.antlr.internal.InternalWDLParser result = new org.xmdl.contentassist.antlr.internal.InternalWDLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getSimpleTypeAccess().getGroup(), "rule__SimpleType__Group__0");
					put(grammarAccess.getSimpleTypeAccess().getGroup_2(), "rule__SimpleType__Group_2__0");
					put(grammarAccess.getJAVAIDAccess().getGroup(), "rule__JAVAID__Group__0");
					put(grammarAccess.getJAVAIDAccess().getGroup_1(), "rule__JAVAID__Group_1__0");
					put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getEnumAccess().getGroup(), "rule__Enum__Group__0");
					put(grammarAccess.getEnumLiteralAccess().getGroup(), "rule__EnumLiteral__Group__0");
					put(grammarAccess.getEmbedAccess().getGroup(), "rule__Embed__Group__0");
					put(grammarAccess.getEntityBodyAccess().getGroup(), "rule__EntityBody__Group__0");
					put(grammarAccess.getEntityBodyAccess().getGroup_1(), "rule__EntityBody__Group_1__0");
					put(grammarAccess.getModelAccess().getTypesAssignment(), "rule__Model__TypesAssignment");
					put(grammarAccess.getSimpleTypeAccess().getNameAssignment_1(), "rule__SimpleType__NameAssignment_1");
					put(grammarAccess.getSimpleTypeAccess().getMappedTypeAssignment_2_1(), "rule__SimpleType__MappedTypeAssignment_2_1");
					put(grammarAccess.getJAVAIDAccess().getNameAssignment_0(), "rule__JAVAID__NameAssignment_0");
					put(grammarAccess.getAttributeAccess().getTypeAssignment_0(), "rule__Attribute__TypeAssignment_0");
					put(grammarAccess.getAttributeAccess().getManyAssignment_1(), "rule__Attribute__ManyAssignment_1");
					put(grammarAccess.getAttributeAccess().getNameAssignment_2(), "rule__Attribute__NameAssignment_2");
					put(grammarAccess.getEnumAccess().getNameAssignment_1(), "rule__Enum__NameAssignment_1");
					put(grammarAccess.getEnumAccess().getLiteralsAssignment_3(), "rule__Enum__LiteralsAssignment_3");
					put(grammarAccess.getEnumLiteralAccess().getNameAssignment_0(), "rule__EnumLiteral__NameAssignment_0");
					put(grammarAccess.getEnumLiteralAccess().getOrdinalAssignment_2(), "rule__EnumLiteral__OrdinalAssignment_2");
					put(grammarAccess.getEntityBodyAccess().getNameAssignment_0(), "rule__EntityBody__NameAssignment_0");
					put(grammarAccess.getEntityBodyAccess().getSuperEntityAssignment_1_1(), "rule__EntityBody__SuperEntityAssignment_1_1");
					put(grammarAccess.getEntityBodyAccess().getAttributesAssignment_3(), "rule__EntityBody__AttributesAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xmdl.contentassist.antlr.internal.InternalWDLParser typedParser = (org.xmdl.contentassist.antlr.internal.InternalWDLParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public WDLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(WDLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
