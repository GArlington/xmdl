«IMPORT wdl »

«EXTENSION templates::Extensions»
«EXTENSION templates::IDAExtensions»

«DEFINE entity FOR wdl::Entity»
«FILE "main/java/" + this.project().basePackagePath() + "/webapp/action/" + this.name + "Action.java" TO_WEB_SRC-»
package «this.project().basePackageName()».webapp.action;

import «this.project().basePackageName()».service.*;
import «this.project().basePackageName()».model.*;
import «this.project().basePackageName()».model.search.*;
import java.util.*;
import org.apache.struts2.interceptor.validation.SkipValidation;
import org.springframework.dao.DataIntegrityViolationException;
import org.xmdl.ida.lib.web.action.BaseAction;
import com.opensymphony.xwork2.Preparable;

/**
 * The action class for «this.name»
 */
public class «this.name»Action extends BaseAction implements Preparable {

    private «this.name»Manager «this.name.toFirstLower()»Manager;

«IF this.isChild()-»
    private «this.master().name»Manager «this.master().name.toFirstLower()»Manager;
«ENDIF-»

    private Collection<«this.name»> «this.name.toFirstLower()»s;

    private «this.name» «this.name.toFirstLower()»;
    
    private Long id;

    private Long idToCopy;

«FOREACH this.attributes AS attribute-»
    «IF this.isEnumeration()-»
    private «attribute.type.name»[] «attribute.name.toFirstLower()»s;

    private Integer[] «attribute.name.toFirstLower()»Ids;
    «ENDIF-»
«ENDFOREACH-» 

    private «this.name»Search «this.name.toFirstLower()»Search = new «this.name»Search();

«IF this.isChild()»
     private «this.master().name» «this.master().name.toFirstLower()»;
     
     private Long «this.master().name.toFirstLower()»ID;
«ENDIF»
 
    public void set«this.name»Manager(«this.name»Manager «this.name.toFirstLower()»Manager) {
        this.«this.name.toFirstLower()»Manager = «this.name.toFirstLower()»Manager;
    }

    public Collection<«this.name»> get«this.name»s() {
        return «this.name.toFirstLower()»s;
    }

    public void prepare() {
        if (getRequest().getMethod().equalsIgnoreCase("post")) {
            // prevent failures on new
            if (id != null) {
                «this.name.toFirstLower()» = «this.name.toFirstLower()»Manager.get((long) id);
            }else{
                «this.name.toFirstLower()» = new «this.name»();
«IF this.isChild()-»
               	if («this.master().name.toFirstLower()»ID == null) {
					try {
               			String parameter = getRequest().getParameter("«this.name.toFirstLower()».«this.master().name.toFirstLower()».id");
                		«this.master().name.toFirstLower()»ID = Long.parseLong(parameter);
					} catch (NumberFormatException e) {
						log.info("no id");
					}
				}
				
				if («this.master().name.toFirstLower()»ID != null) {
                    «this.master().name.toFirstLower()» = «this.master().name.toFirstLower()»Manager.get(«this.master().name.toFirstLower()»ID);
                   	«this.name.toFirstLower()»Search.set«this.master().name.toFirstUpper()»(«this.master().name.toFirstLower()»);
                    «this.name.toFirstLower()»s = «this.name.toFirstLower()»Manager.search(«this.name.toFirstLower()»Search);
	            } else {
                	«this.master().name.toFirstLower()» = new «this.master().name»();
            	}
«ENDIF-»
            }
        }

    «FOREACH this.attributes AS attribute-»
        «IF this.isEnumeration()-»
        «attribute.name.toFirstLower()»s = «attribute.type.name».values();
        «ENDIF-»
    «ENDFOREACH-» 

    }

    @SkipValidation
    public String list() {
        if (log.isDebugEnabled()) log.debug("list() <-");

    «FOREACH this.attributes AS attribute»
        «IF this.isEnumeration()»
        if(«attribute.name.toFirstLower()»Ids!=null){
            «this.name.toFirstLower()»Search.set«attribute.name.toFirstUpper()»Min(«attribute.type.name».fromInt(«attribute.name.toFirstLower()»Ids[0]));
            «this.name.toFirstLower()»Search.set«attribute.name.toFirstUpper()»Max(«attribute.type.name».fromInt(«attribute.name.toFirstLower()»Ids[0]));
        }
        «ENDIF»
    «ENDFOREACH» 
        «this.name.toFirstLower()»s = «this.name.toFirstLower()»Manager.search(«this.name.toFirstLower()»Search);

        if (log.isDebugEnabled()) log.debug("listing items:" + «this.name.toFirstLower()»s == null ? null : «this.name.toFirstLower()»s.size());
        if (log.isDebugEnabled()) log.debug("list() ->");
        return SUCCESS;
    }

    @SkipValidation
    public String delete() {
        if (log.isDebugEnabled()) log.debug("delete() <-");

        «this.name.toFirstLower()»Manager.remove(«this.name.toFirstLower()».getId());
        saveMessage(getText("«this.name.toFirstLower()».deleted"));

        if (log.isDebugEnabled()) log.debug("deleting «this.name.toFirstLower()»: " + «this.name.toFirstLower()»);
        if (log.isDebugEnabled()) log.debug("delete() ->");

        return SUCCESS;
    }

    public String copy() {
        if (log.isDebugEnabled()) log.debug("copy() <-");

        if (idToCopy != null) {
            «this.name.toFirstLower()» = «this.name.toFirstLower()»Manager.get(idToCopy);
        }

        «this.name.toFirstLower()».setId(null);

        if (log.isDebugEnabled()) log.debug("copying «this.name.toFirstLower()»: " + «this.name.toFirstLower()»);
        if (log.isDebugEnabled()) log.debug("copy() ->");

        return SUCCESS;
    }

    public String edit() {
        if (log.isDebugEnabled()) log.debug("edit() <-");

        if (id != null) {
            «this.name.toFirstLower()» = «this.name.toFirstLower()»Manager.get(id);
        } else {
            «this.name.toFirstLower()» = new «this.name»();
        }

        if (log.isDebugEnabled()) log.debug("editing «this.name.toFirstLower()»: " + «this.name.toFirstLower()»);
        if (log.isDebugEnabled()) log.debug("edit() ->");

        return SUCCESS;
    }

    @SkipValidation
    public String deleteMass() throws Exception {
        if (log.isDebugEnabled()) log.debug("deleteMass() <-");

        boolean cannotDeleted = false;
        boolean anyDeleted = false;
        if (getDeleteId() != null) {
            for (String idStr : getDeleteId()) {
                try {
                    «this.name.toFirstLower()»Manager.remove(new Long(idStr));
                    anyDeleted = true;

                    if (log.isDebugEnabled()) log.debug("deleting «this.name.toFirstLower()» with id: " + idStr);
                } catch (DataIntegrityViolationException e) {
                    e.printStackTrace();
                    cannotDeleted = true;

                    if (log.isDebugEnabled()) log.debug("could not delete «this.name.toFirstLower()» with id: " + idStr);
                }
            }
        }
        if (cannotDeleted) saveMessage(getText("«this.name».cannotBeDeleted"));
        if (anyDeleted) saveMessage(getText("«this.name».deleted"));

        «this.name.toFirstLower()»s = «this.name.toFirstLower()»Manager.search(«this.name.toFirstLower()»Search);

        if (log.isDebugEnabled()) log.debug("deleteMass() ->");

        return SUCCESS;
    }


    public String save() throws Exception {
        if (log.isDebugEnabled()) log.debug("save() <-");

        if (cancel != null) {
            if (log.isDebugEnabled()) log.debug("save() ->");
            return "cancel";
        }

        if (delete != null) {
            if (log.isDebugEnabled()) log.debug("save() ->");
            return delete();
        }

        boolean isNew = («this.name.toFirstLower()».getId() == null);

    «FOREACH this.attributes AS attribute»
        «IF this.isEnumeration()»
        «this.name.toFirstLower()».set«attribute.name.toFirstUpper()»(«attribute.type.name».fromInt(Integer.valueOf(«attribute.name.toFirstLower()»Ids[0])));
        «ENDIF»
    «ENDFOREACH» 

        «this.name.toFirstLower()»Manager.save(«this.name.toFirstLower()»);

        String key = (isNew) ? "«this.name.toFirstLower()».added" : "«this.name.toFirstLower()».updated";
        saveMessage(getText(key));

        String logMessage = (isNew) ? "adding «this.name.toFirstLower()»: " + «this.name.toFirstLower()» : "updating «this.name.toFirstLower()»: " + «this.name.toFirstLower()»;
        if (log.isDebugEnabled()) log.debug(logMessage);
        if (log.isDebugEnabled()) log.debug("save() ->");

        if (!isNew) {
            return INPUT;
        } else {
            return SUCCESS;
        }
    }

    public void setId(Long id) {
        this. id = id;
    }

    public «this.name» get«this.name»() {
        return «this.name.toFirstLower()»;
    }

    public void set«this.name»(«this.name» «this.name.toFirstLower()») {
        this.«this.name.toFirstLower()» = «this.name.toFirstLower()»;
    }

    public «this.name»Search get«this.name»Search() {
        return «this.name.toFirstLower()»Search;
    }

    public void set«this.name»Search(«this.name»Search «this.name.toFirstLower()»Search) {
        this.«this.name.toFirstLower()»Search = «this.name.toFirstLower()»Search;
    }

    public Long getIdToCopy() {
        return idToCopy;
    }

    public void setIdToCopy(Long idToCopy) {
        this.idToCopy = idToCopy;
    }

    public «this.name»Manager get«this.name»Manager() {
        return «this.name.toFirstLower()»Manager;
    }

«FOREACH this.attributes AS attribute-»
    «IF this.isEnumeration()-»
    public «attribute.type.name»[] get«attribute.name.toFirstUpper()»s() {
        return «attribute.name.toFirstLower()»s;
    }

    public void set«attribute.name.toFirstUpper()»s(«attribute.type.name»[] «attribute.name.toFirstLower()»s) {
        this.«attribute.name.toFirstLower()»s = «attribute.name.toFirstLower()»s;
    }

    public Integer[] get«attribute.name.toFirstUpper()»Ids() {
        return «attribute.name.toFirstLower()»Ids;
    }

    public void set«attribute.name.toFirstUpper()»Ids(Integer[] «attribute.name.toFirstLower()»Ids) {
        this.«attribute.name.toFirstLower()»Ids = «attribute.name.toFirstLower()»Ids;
    }
    
    «ENDIF»
«ENDFOREACH» 

    «PROTECT CSTART '/*' CEND '*/' ID this.name + ".act.bdy" »
    //This is the protected region that will not be overwritten on generation
    «ENDPROTECT»

}
«ENDFILE-»
«ENDDEFINE»
