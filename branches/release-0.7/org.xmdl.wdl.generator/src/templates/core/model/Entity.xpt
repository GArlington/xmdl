«IMPORT wdl»

«EXTENSION templates::Extensions»
«EXTENSION templates::IDAExtensions»

«DEFINE entity FOR wdl::Entity»
  «FILE "core/src/main/java/org/xmdl/taslak/model/"+ this.name + ".java"»
package org.xmdl.taslak.model;

import javax.persistence.*;
import org.xmdl.ida.lib.model.BaseObject;
import org.hibernate.annotations.Type;
import org.hibernate.annotations.Parameter;
import java.io.Serializable;
import java.text.MessageFormat;
import java.util.*;
import org.xmdl.mesken.model.*;


/**
 *
 * «this.name» entity bean
 *  
 * $Id$
 *
 */ 
@Entity (name="TBL_«this.name.toUpperCase()»")
public class «this.name» extends BaseObject implements Serializable, Cloneable {

    /** 
     * Unique identifier
     * 
     * @generated
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "ID")
    private Long id;
    
    «FOREACH this.attributes AS attribute»
    «IF !attribute.isReference()»
	@Column(name = "«attribute.columnName()»", length = «attribute.columnSize()»«IF attribute.isEnumeration()», columnDefinition = "integer", nullable = false«ENDIF»)
	«EXPAND Entity::enumAnnotation FOR attribute »
    «ELSE»
    «attribute.associationAnnotation()»
    «ENDIF»
    private «attribute.type.simpleName()» «attribute.name.toFirstLower()» «IF attribute.isEmbed()»= new «attribute.type.name»()«ENDIF»;
    «ENDFOREACH»

    public «this.name»() {
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    «FOREACH this.attributes AS attribute»
    public «attribute.type.simpleName()» get«attribute.name.toFirstUpper()»() {
        return «attribute.name.toFirstLower()»;
    }

    public void set«attribute.name.toFirstUpper()»(«attribute.type.simpleName()» «attribute.name.toFirstLower()») {
        this.«attribute.name.toFirstLower()» = «attribute.name.toFirstLower()»;
    }

    «ENDFOREACH»

    public String toString() {
    	«this.entityToString()»;
    }

    public boolean equals(Object o) {
        return o instanceof «this.name» && ((«this.name») o).getId() == this.getId();
    }

    public int hashCode() {
        int result = 1;
        if (id != null) result = 31 * result + id.hashCode();
    «FOREACH this.attributes AS attribute»
        «IF !attribute.isReference()»
            «IF attribute.isPrimitive()»
        if («attribute.name.toFirstLower()» != null) result = 31 * result + ("" + «attribute.name.toFirstLower()»).hashCode();
            «ELSE»
        if («attribute.name.toFirstLower()» != null) result = 31 * result + «attribute.name.toFirstLower()».hashCode();
            «ENDIF»
        «ENDIF»
    «ENDFOREACH»
        return result;
    }

     public «this.name» createClone() {
         try {
             return («this.name») clone();
        } catch (CloneNotSupportedException e) {
            «this.name» copy = new «this.name»();
    «FOREACH this.attributes AS attribute»
        «IF !attribute.isReference()»
            copy.«attribute.name.toFirstLower()» = this.«attribute.name.toFirstLower()»;
        «ENDIF»
    «ENDFOREACH»
            return copy;
        }
     }
}
  «ENDFILE»
«ENDDEFINE»

«DEFINE enumAnnotation FOR wdl::Attribute»
«IF this.isEnumeration()»
    @Type(
            type = "org.xmdl.ida.lib.dao.hibernate.GenericEnumUserType",
            parameters = {
            @Parameter(
                    name = "enumClass",
                    value = "«this.type.qualifiedName()»"),
            @Parameter(
                    name = "identifierMethod",
                    value = "toInt"),
            @Parameter(
                    name = "valueOfMethod",
                    value = "fromInt")
                    }
    )
«ENDIF»
«ENDDEFINE»
