#summary XMDL Developer's Guide
#labels Draft,Phase-Implementation

== Introduction ==

This guide intends to contain brief information for XMDL developers. 

== Development Environment Setup ==

You would need to install the following software components for XMDL development:

 * [http://www.eclipse.org/ Eclipse] 3.3, including the following plugins,
   * [http://www.eclipse.org/modeling/emf/ Eclipse Modeling Framework Extender SDK] 2.3.0, via update site
   * [http://www.eclipse.org/emft/projects/jet Eclipse Modeling Framework Technologies - JET] 0.8, via update site
   * [http://archive.eclipse.org/modeling/m2t/jet/downloads/drops/0.8.0/I200703030036/ JET Editor] 0.8.0, emft-jeteditor-runtime-*.zip file via manual installation
 * Latest version of [http://subclipse.tigris.org/ Subclipse] (SVN client for Eclipse), via [http://subclipse.tigris.org/update_1.2.x/ update site]

When installation is complete, add XMDL project components into your workspace. 

 * Click menu item File -> Project,
 * Select SVN -> Checkout Projects from SVN, click Next,
 * Select "Create a new repository location", click Next,
 * Enter "https://xmdl.googlecode.com/svn/trunk/" for URL, click Next,
 * Select the following folders on tree;
   * xmdl/
   * xmdl.core/
   * xmdl.corelib/
   * xmdl.gen/
   * xmdl.lib/
   * xmdl.ui/
   * xmdlbo.ui/
   * xmdldb.ui/
   * xmdlgen.ui/
 * Click Finish
 * Perform this step for the wiki/ folder under https://xmdl.googlecode.com/svn/wiki/ if you would like to follow wiki changes inside Eclipse IDE.
 
== XMDL Components ([Metamodel Meta-models] and Editors) ==

 * *xmdl* is the component where main metamodel and sub-metamodel components are defined. checkout model directory under xmdl component for metamodel (.ecore) definitions. Most of the code used in this component is auto-generated using the EMF code generation support. 
 * *xmdl.gen* is the code generation engine. Further platforms can be added as [http://wiki.eclipse.org/index.php/FAQ_What_are_extensions_and_extension_points%3F extension points] for this component using an [http://wiki.eclipse.org/FAQ_What_is_a_plug-in%3F Eclipse Plugin definition]. This component also contains [http://java.sun.com/blueprints/corej2eepatterns/Patterns/ViewHelper.html helper classes] to support templates during code generation.
 * *xmdl.ui* is the component that provides UI editor support for the XMDL Base Metamodel (.xmdl).
 * *xmdlbo.ui* is the component that provides UI editor support for the XMDL Business (Service) Layer Metamodel (.xmdlbo).
 * *xmdldb.ui* is the component that provides UI editor support for the XMDL Database Metamodel (.xmdldb).
 * *xmdlgen.ui* is the component that provides UI editor support for the XMDL Code Generation Metamodel (.xmdlgen).
   * All those .ui components follow MVC pattern and provide the Controller/View layer in order to introduce editor support for each model. 
   * Most of the code used in those components are auto-generated using the EMF code generation support.        
   * _Please refer to the [Metamodel Meta-model information page] for details about these meta-models._
   * Checkout the following for further information about EMF editors and code generation.
     * [http://www.eclipse.org/articles/Article-Using%20EMF/using-emf.html EMF tutorial] 
     * [http://dev.eclipse.org/viewcvs/indextools.cgi/org.eclipse.emf/doc/org.eclipse.emf.doc/references/overview/EMF.html EMF Overview page] 
     * [http://redmonk.com/tv/eclipse-emf-demo-large/ EMF Demo Video]  
 * *xmdl.lib* is the place where depended libraries are stored. Those libraries (like log4j) are used by other xmdl components. Build scripts used to build all xmdl components are also stored here. Delivery of the whole package is performed using these scripts.  
 * *xmdl.core* is the default platform implementation, with the code name "Cekirdek". Please refer to [CorePlatform Platform Guide] to have more information about implementation details. 
 * *xmdl.corelib* libraries referenced by *xmdl.core* component. It also provides the base framework library (xmdl.corelib.jar). 
 
 XMDL Components have the following dependency structure on the plugin level.

  * xmdl ->
    * _org.eclipse.core.runtime,_
    * _org.eclipse.emf.ecore.xmi,_
    * _org.apache.log4j,_
    * _org.apache.commons.beanutils_
  * xmdl.core -> 
    * xmdl,
    * xmdl.gen,
    * _org.eclipse.emf.ecore,_
    * _org.eclipse.emf.codegen,_
    * _org.eclipse.core.runtime,_
    * _org.apache.log4j_
  * xmdl.gen -> 
    * xmdl,
    * _org.eclipse.emf.ecore.xmi,_
    * _org.eclipse.emf.codegen,_
    * _org.eclipse.core.runtime.compatibility,_
    * _org.eclipse.core.resources,_
    * _org.eclipse.jdt.core,_
    * _org.junit,_
    * _org.apache.log4j_
  * xmdl.ui -> 
    * xmdl,
    * xmdl.gen,
    * _org.eclipse.core.runtime,_
    * _org.eclipse.core.resources,_
    * _org.eclipse.emf.mapping,_
    * _org.eclipse.emf.ecore.xmi,_
    * _org.eclipse.emf.codegen.ecore.ui,_
    * _org.eclipse.jdt.core,_
    * _org.eclipse.jdt.ui,_
    * _org.apache.log4j_
  * xmdlbo.ui -> 
    * xmdl,
    * xmdl.ui,
    * _org.eclipse.core.runtime,_
    * _org.eclipse.emf.edit.ui,_
    * _org.eclipse.core.resources,_
    * _org.eclipse.ui.ide,_
    * _org.eclipse.emf.ecore.xmi_
  * xmdldb.ui -> 
    * xmdl.ui,
    * xmdl,
    * _org.eclipse.core.runtime,_
    * _org.eclipse.emf.edit.ui,_
    * _org.eclipse.core.resources,_
    * _org.eclipse.ui.ide,_
    * _org.eclipse.emf.ecore.xmi_
  * xmdlgen.ui -> 
    * xmdl,
    * xmdl.ui,
    * _org.eclipse.core.runtime,_
    * _org.eclipse.emf.edit.ui,_
    * _org.eclipse.core.resources,_
    * _org.eclipse.ui.ide,_
    * _org.eclipse.emf.ecore.xmi_ 
    
== Platform Development ==

TODO: Plugin Extension Point
TODO: Adding Templates
TODO: Defining Tasks
TODO: Init structure


 