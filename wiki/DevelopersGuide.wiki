#summary XMDL Developer's Guide
#labels Draft,Phase-Implementation

== Introduction ==

This guide intends to contain brief information for XMDL developers. 

== Development Environment Setup ==

You would need to install the following software components for XMDL development:

 * Download and unzip [http://www.eclipse.org/downloads/moreinfo/classic.php Eclipse Classic] 3.3.x (includes PDE), 
 * Run eclipse using a clean workspace
 * Go to menu Help -> Software Updates -> Find and Install
 * Select "Search for new Features to install", click next
 * Click "Import Sites...", 


   * [http://www.eclipse.org/modeling/emf/ Eclipse Modeling Framework Extender SDK] 2.3.0, via update site using the [http://www.eclipse.org/modeling/emf/updates/ instructions given].
   * [http://www.eclipse.org/modeling/m2t/downloads/?project=jet JET SDK (Runtime, Source) 0.8.1], Plugin files via manual installation
      * Download "SDK (Runtime, Source)" component
      * Extract the zip file in the parent directory where your eclipse installation directory is. Therefore, all jar files in the downloaded zip file will be extracted to eclipse/plugins and eclipse/features directory.
   * [http://code.google.com/p/xmdl/downloads/list XMDL 0.6.0] via manual installation
 * Latest version of [http://subclipse.tigris.org/ Subclipse] (SVN client for Eclipse), via [http://subclipse.tigris.org/update_1.2.x/ update site]

When installation is complete, add XMDL project components into your workspace. 
_It is recommended to setup a separate workspace in Eclipse containing the following XMDL components_

 * Click menu item File -> Project,
 * Select SVN -> Checkout Projects from SVN, click Next,
 * Select "Create a new repository location", click Next,
 * Enter "https://xmdl.googlecode.com/svn/trunk/" for URL, click Next,
 * Select the following folders on tree;
   * xmdl/
   * xmdl.core/
   * xmdl.corelib/
   * xmdl.gen/
   * xmdl.genext/
   * xmdl.genext.test/
   * xmdl.lib/
   * xmdl.ida/
   * xmdl.ui/
   * xmdlbo.ui/
   * xmdldb.ui/
   * xmdlgen.ui/
 * Click Finish
 * Perform this step for the wiki/ folder under https://xmdl.googlecode.com/svn/wiki/ if you would like to follow wiki changes inside Eclipse IDE.
 
== XMDL Components ([Metamodel Meta-models] and Editors) ==

 * *xmdl* is the component where main metamodel and sub-metamodel components are defined. checkout model directory under xmdl component for metamodel (.ecore) definitions. Most of the code used in this component is auto-generated using the EMF code generation support. 
 * *xmdl.gen* is the code generation engine. Further platforms can be added as [http://wiki.eclipse.org/index.php/FAQ_What_are_extensions_and_extension_points%3F extension points] for this component using an [http://wiki.eclipse.org/FAQ_What_is_a_plug-in%3F Eclipse Plugin definition]. This component also contains [http://java.sun.com/blueprints/corej2eepatterns/Patterns/ViewHelper.html helper classes] to support templates during code generation.
 * *xmdl.genext* is the code generator extension module. JET2 tag libraries are defined in this module. 
 * *xmdl.genext.test* is the unit test module for the *xmdl.genext* module. 
 * *xmdl.ui* is the component that provides UI editor support for the XMDL Base Metamodel (.xmdl).
 * *xmdlbo.ui* is the component that provides UI editor support for the XMDL Business (Service) Layer Metamodel (.xmdlbo).
 * *xmdldb.ui* is the component that provides UI editor support for the XMDL Database Metamodel (.xmdldb).
 * *xmdlgen.ui* is the component that provides UI editor support for the XMDL Code Generation Metamodel (.xmdlgen).
   * All those .ui components follow MVC pattern and provide the Controller/View layer in order to introduce editor support for each model. 
   * Most of the code used in those components are auto-generated using the EMF code generation support.        
   * _Please refer to the [Metamodel Meta-model information page] for details about these meta-models._
   * Checkout the following for further information about EMF editors and code generation.
     * [http://www.eclipse.org/articles/Article-Using%20EMF/using-emf.html EMF tutorial] 
     * [http://dev.eclipse.org/viewcvs/indextools.cgi/org.eclipse.emf/doc/org.eclipse.emf.doc/references/overview/EMF.html EMF Overview page] 
     * [http://redmonk.com/tv/eclipse-emf-demo-large/ EMF Demo Video]  
 * *xmdl.lib* is the place where depended libraries are stored. Those libraries (like log4j) are used by other xmdl components. Build scripts used to build all xmdl components are also stored here. Delivery of the whole package is performed using these scripts.  
 * *xmdl.core* is the default platform implementation, with the code name "Cekirdek". Please refer to [CorePlatform Platform Guide] to have more information about implementation details. 
 * *xmdl.corelib* libraries referenced by *xmdl.core* component. It also provides the base framework library (xmdl.corelib.jar). 
 
=== Inter-Component Dependencies ===

 XMDL Components have the following dependency structure on the plugin level. Third party depencencies are marked with _italic_ letters.

  * xmdl ->
    * _org.eclipse.core.runtime_
    * _org.eclipse.emf.ecore.xmi_
    * _org.apache.log4j_
    * _org.apache.commons.beanutils_
  * xmdl.core -> 
    * xmdl
    * xmdl.gen
    * _org.eclipse.emf.ecore_
    * _org.eclipse.emf.codegen_
    * _org.eclipse.core.runtime_
    * _org.apache.log4j_
    * _org.eclipse.jet_
  * xmdl.ida -> 
    * xmdl
    * xmdl.gen
    * xmdl.genext
    * _org.eclipse.emf.ecore_
    * _org.eclipse.emf.codegen_
    * _org.eclipse.core.runtime_
    * _org.apache.log4j_
    * _org.eclipse.jet_
  * xmdl.gen -> 
    * xmdl
    * _org.eclipse.emf.ecore.xmi_
    * _org.eclipse.emf.codegen_
    * _org.eclipse.core.runtime.compatibility_
    * _org.eclipse.core.resources_
    * _org.eclipse.jdt.core_
    * _org.junit_
    * _org.apache.log4j_
    * _org.eclipse.jet_
  * xmdl.genext -> 
    * xmdl
    * _org.eclipse.jet_
    * _org.eclipse.core.runtime.compatibility_
    * _org.eclipse.emf.ecore_
  * xmdl.genext.test -> 
    * xmdl
    * xmdl.gen
    * xmdl.genext
    * _org.eclipse.emf.ecore_
    * _org.eclipse.core.runtime.compatibility_
    * _org.junit_
    * _org.apache.log4j_
    * _org.eclipse.jet_
  * xmdl.ui -> 
    * xmdl
    * xmdl.gen
    * _org.eclipse.core.runtime_
    * _org.eclipse.core.resources_
    * _org.eclipse.emf.mapping_
    * _org.eclipse.emf.ecore.xmi_
    * _org.eclipse.emf.codegen.ecore.ui_
    * _org.eclipse.jdt.core_
    * _org.eclipse.jdt.ui_
    * _org.apache.log4j_
  * xmdlbo.ui -> 
    * xmdl
    * xmdl.ui
    * _org.eclipse.core.runtime_
    * _org.eclipse.emf.edit.ui_
    * _org.eclipse.core.resources_
    * _org.eclipse.ui.ide_
    * _org.eclipse.emf.ecore.xmi_
  * xmdldb.ui -> 
    * xmdl.ui
    * xmdl
    * _org.eclipse.core.runtime_
    * _org.eclipse.emf.edit.ui_
    * _org.eclipse.core.resources_
    * _org.eclipse.ui.ide_
    * _org.eclipse.emf.ecore.xmi_
  * xmdlgen.ui -> 
    * xmdl
    * xmdl.ui
    * _org.eclipse.core.runtime_
    * _org.eclipse.emf.edit.ui_
    * _org.eclipse.core.resources_
    * _org.eclipse.ui.ide_
    * _org.eclipse.emf.ecore.xmi_ 
    
== Platform Development ==

This chapter explains details for introducing a new target platform, or changing currently defined platforms.

=== Plugin Extension Point ===

Each platform is defined as an Eclipse plugin. A platform plugin uses the "xmdl.gen.registry" extension point to register itself as a plugin. Thus, code generation can be performed for this plugin via the editors context menu.

*xmdl.gen.registry* extension point has the following configuration markup:
{{{
<!ELEMENT extension (platform+)>
<!ATTLIST extension
    point CDATA #IMPLIED
    id    CDATA #IMPLIED
    name  CDATA #IMPLIED>

 <!--
    id - Unique extension id 
    name - Name of extension
 --> 

<!ELEMENT platform EMPTY>
<!ATTLIST platform
    name    CDATA #REQUIRED
    version CDATA #REQUIRED
    class   CDATA #REQUIRED>


 <!--
    name - Name of the platform 
    version - Platform version 
    class - Implementation class name 
 -->
}}}
 
An [http://help.eclipse.org/help32/index.jsp?topic=/org.eclipse.pde.doc.user/guide/tools/editors/manifest_editor/extension_points.htm extension point] must be defined in the platform's plugin.xml file. You can use a simple text editor or the [http://help.eclipse.org/help32/topic/org.eclipse.pde.doc.user/guide/tools/editors/manifest_editor/editor.htm Plug-in manifest editor] to add a platform definition.

Here is a sample extension point definition:
{{{
    <extension
         id="xmdl.core"
         name="XMDL Core Platform"
         point="xmdl.gen.register">
      <platform
            class="chrome.xmdl.core.platform.XmdlCorePlatform"
            name="Cekirdek"
            version="0.5.0"/>
   </extension>
}}}  

{{{
TODO: Adding Templates
TODO: Defining Tasks
TODO: Init structure
}}}

 
 
 
 
 