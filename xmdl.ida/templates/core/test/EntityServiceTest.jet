<%@taglib prefix="c" id="org.eclipse.jet.controlTags" %>
<%@taglib prefix="w" id="org.eclipse.jet.workspaceTags" %>
<%@taglib prefix="j" id="org.eclipse.jet.javaTags" %>
<%@taglib prefix="f" id="org.eclipse.jet.formatTags" %>
<%@taglib prefix="xc" id="xmdl.genext.xmdlClass" %>
<%@ jet 
	package="org.xmdl.ida.templates.core.test" 
	class="EntityServiceTestImpl" 
	%><%
    org.apache.log4j.Logger.getLogger(getClass()).debug(" generate ");    
%>
package <xc:qualifiedName element="$class/xPackage"/>.service.impl;

<j:importsLocation package=""/>

<xc:import pattern="java.util.ArrayList"/>
<xc:import pattern="java.util.List"/>
<xc:import pattern="java.util.Collection"/>
<xc:import pattern="org.jmock.Mock"/>
<xc:import pattern="org.xmdl.ida.lib.test.BaseManagerMockTestCase"/>

<xc:import pattern="$element.service.impl.*" element="$class/xPackage"/>
<xc:import pattern="$element.model.*" element="$class/xPackage"/>
<xc:import pattern="$element.model.search.*" element="$class/xPackage"/>
<xc:import pattern="$element.dao.*" element="$class/xPackage"/>

/**
 *
 * <xc:cap element="$class"/> Service Implementation Test
 *  
 * $Id$
 *
 * @generated
 */ 
public class <xc:cap element="$class"/>ManagerImplTest extends BaseManagerMockTestCase {

    private <xc:cap element="$class"/>ManagerImpl manager = null;
    private Mock dao = null;
    private <xc:cap element="$class"/> <xc:uncap element="$class"/> = null;

    protected void setUp() throws Exception {
        dao = new Mock(<xc:cap element="$class"/>DAO.class);
        manager = new <xc:cap element="$class"/>ManagerImpl((<xc:cap element="$class"/>DAO) dao.proxy());
    }

    protected void tearDown() throws Exception {
        manager = null;
    }

    public void testGet() {
        log.debug("testing get");

        Long id = 7L;
        <xc:uncap element="$class"/> = new <xc:cap element="$class"/>();

        // set expected behavior on DAO
        dao.expects(once()).method("get")
                .with(eq(id))
                .will(returnValue(<xc:uncap element="$class"/>));

        <xc:cap element="$class"/> result = manager.get(id);
        assertSame(<xc:uncap element="$class"/>, result);
    }

    public void testGetAll() {
        log.debug("testing getAll");

        List<<xc:cap element="$class"/>> list = new ArrayList<<xc:cap element="$class"/>>();

        // set expected behavior on dao
        dao.expects(once()).method("getAll")
                .will(returnValue(list));

        List<<xc:cap element="$class"/>> result = manager.getAll();
        assertSame(list, result);
    }

    public void testSearch() {
        log.debug("testing search");

        List<<xc:cap element="$class"/>> list = new ArrayList<<xc:cap element="$class"/>>();
        <xc:cap element="$class"/>Search searchBean=new <xc:cap element="$class"/>Search();

        // set expected behavior on DAO
        dao.expects(once()).method("search")
                .with(eq(searchBean))
                .will(returnValue(list));

        Collection<<xc:cap element="$class"/>> result = manager.search(searchBean);
        assertSame(list, result);
    }

    public void testSave() {
        log.debug("testing save");

        <xc:uncap element="$class"/> = new <xc:cap element="$class"/>();

        // set expected behavior on DAO
        dao.expects(once()).method("save")
                .with(same(<xc:uncap element="$class"/>))
                .will(returnValue(<xc:uncap element="$class"/>));

        manager.save(<xc:uncap element="$class"/>);
    }

    public void testRemove() {
        log.debug("testing remove");

        Long id = 11L;
        <xc:uncap element="$class"/> = new <xc:cap element="$class"/>();

        // set expected behavior on DAO
        dao.expects(once()).method("remove")
                .with(eq(id))
                .isVoid();

        manager.remove(id);
    }

}
