<%@taglib prefix="c" id="org.eclipse.jet.controlTags" %>
<%@taglib prefix="w" id="org.eclipse.jet.workspaceTags" %>
<%@taglib prefix="j" id="org.eclipse.jet.javaTags" %>
<%@taglib prefix="f" id="org.eclipse.jet.formatTags" %>
<%@taglib prefix="xc" id="org.xmdl.genext.xmdlClass" %>
<%@taglib prefix="ida" id="org.xmdl.ida.idaUtils" %>
<%@jet 
    package="org.xmdl.ida.templates.core.dao" 
    class="EntityDAOHibernateImpl" 
    %><%
    org.apache.log4j.Logger.getLogger(getClass()).debug(" generate ");    
%>
package <xc:qualifiedName element="$class/xPackage"/>.dao.hibernate;

<j:importsLocation package=""/>

<xc:import pattern="org.xmdl.ida.lib.dao.hibernate.GenericDaoHibernate"/>
<xc:import pattern="org.hibernate.Criteria"/>
<xc:import pattern="org.hibernate.Session"/>
<xc:import pattern="org.hibernate.criterion.Restrictions"/>
<xc:import pattern="java.util.*"/>

<xc:import pattern="$element.model.*" element="$class/xPackage"/>
<xc:import pattern="$element.model.search.*" element="$class/xPackage"/>
<xc:import pattern="$element.dao.*" element="$class/xPackage"/>

/**
 *
 * <xc:cap element="$class"/> DAO Hibernate implementation
 *  
 * $Id$
 *
 * @generated
 */ 
public class <xc:cap element="$class"/>DAOHibernate extends GenericDaoHibernate<<xc:cap element="$class"/>, Long> implements <xc:cap element="$class"/>DAO {

    /**
     * Public default constructor
     * @generated
     */ 
    public <xc:cap element="$class"/>DAOHibernate() {
        super(<xc:cap element="$class"/>.class);
    }

    /**
     * @generated
     */ 
    public Collection<<xc:cap element="$class"/>> search(<xc:cap element="$class"/>Search <xc:uncap element="$class"/>Search) {
        if (log.isDebugEnabled()) {
            log.debug("search(<xc:cap element="$class"/>Search <xc:uncap element="$class"/>Search) <-");
            log.debug("<xc:uncap element="$class"/>Search: " + <xc:uncap element="$class"/>Search);
        }
        
        Collection<<xc:cap element="$class"/>> list = null;
        if (<xc:uncap element="$class"/>Search == null) {
            list = new ArrayList<<xc:cap element="$class"/>>();
        } else {
<c:iterate select="$class/attributes" var="attribute">
    <c:choose>
    <c:when test="call($attribute/type, 'isComparable')">
            <xc:attributeType attribute="$attribute" wrapType="true" wrapAssociation="false"/> min<xc:cap element="$attribute"/> = <xc:uncap element="$class"/>Search.<xc:accessor attribute="$attribute"/>Min();
            <xc:attributeType attribute="$attribute" wrapType="true" wrapAssociation="false"/> max<xc:cap element="$attribute"/> = <xc:uncap element="$class"/>Search.<xc:accessor attribute="$attribute"/>Max();
    </c:when>
    <c:otherwise>
            <xc:attributeType attribute="$attribute" wrapType="true" wrapAssociation="false"/> <xc:uncap element="$attribute"/> = <xc:uncap element="$class"/>Search.<xc:accessor attribute="$attribute"/>();
    </c:otherwise>
    </c:choose>
</c:iterate> 

            if (log.isDebugEnabled()) {
                log.debug("search(<xc:cap element="$class"/>Search <-");
<c:iterate select="$class/attributes" var="attribute">
    <c:choose>
    <c:when test="call($attribute/type, 'isComparable')">
                log.debug("min<xc:cap element="$attribute"/>       : " + min<xc:cap element="$attribute"/>);
                log.debug("max<xc:cap element="$attribute"/>       : " + max<xc:cap element="$attribute"/>);
    </c:when>
    <c:otherwise>
                log.debug("<xc:uncap element="$attribute"/>       : " + <xc:uncap element="$attribute"/>);
    </c:otherwise>
    </c:choose>
</c:iterate>
            }

                Session session = getSession();
                Criteria criteria = session.createCriteria(<xc:cap element="$class"/>.class);
<c:iterate select="$class/attributes" var="attribute">
    <c:if test="not(call($attribute, 'isReference'))">
        <c:choose>
            <c:when test="call($attribute/type, 'isComparable')">
            if (min<xc:cap element="$attribute"/> != null)
                criteria.add(Restrictions.ge("<xc:uncap element="$attribute"/>", min<xc:cap element="$attribute"/>));
            if (max<xc:cap element="$attribute"/> != null)
                criteria.add(Restrictions.le("<xc:uncap element="$attribute"/>", max<xc:cap element="$attribute"/>));
            </c:when>
            <c:otherwise>
            if (<xc:uncap element="$attribute"/> != null)
                criteria.add(Restrictions.eq("<xc:uncap element="$attribute"/>", <xc:uncap element="$attribute"/>));
            </c:otherwise>
        </c:choose>
    </c:if>
    <c:if test="call($attribute, 'isReference')">
            if (<xc:uncap element="$attribute"/> != null){
                Criteria subCriteria = criteria.createCriteria("<xc:uncap element="$attribute"/>");
                subCriteria.add(Restrictions.idEq(<xc:uncap element="$attribute"/>.getId()));
            }
    </c:if>
</c:iterate> 
            list = criteria.list();

        }


        if (log.isDebugEnabled())
            log.debug("search(<xc:cap element="$class"/>Search <xc:uncap element="$class"/>Search) ->");
        return list;
    }

}
