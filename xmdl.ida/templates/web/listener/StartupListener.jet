<%@taglib prefix="c" id="org.eclipse.jet.controlTags" %>
<%@taglib prefix="j" id="org.eclipse.jet.javaTags" %>
<%@taglib prefix="xc" id="xmdl.genext.xmdlClass" %>
<%@taglib prefix="xd" id="xmdl.genext.xmdlDB" %>
<%@taglib prefix="ida" id="org.xmdl.ida.idaUtils" %>
<%@jet 
	package="org.xmdl.ida.templates.web.listener" 
	class="StartupListenerImpl"  
	%><%
    org.apache.log4j.Logger.getLogger(getClass()).debug(" generate ");    
%>
package <xc:qualifiedName element="$project/packages[1]"/>.webapp.listener;

<j:importsLocation package=""/>

<xc:import pattern="$element.ApplicationConstants" element="$project/packages[1]"/>

<xc:import pattern="org.acegisecurity.providers.AuthenticationProvider"/>
<xc:import pattern="org.acegisecurity.providers.ProviderManager"/>
<xc:import pattern="org.acegisecurity.providers.encoding.Md5PasswordEncoder"/>
<xc:import pattern="org.acegisecurity.providers.rememberme.RememberMeAuthenticationProvider"/>
<xc:import pattern="org.apache.commons.logging.Log"/>
<xc:import pattern="org.apache.commons.logging.LogFactory"/>
<xc:import pattern="org.xmdl.ida.lib.BaseConstants"/>
<xc:import pattern="org.xmdl.ida.lib.service.LookupManager"/>
<xc:import pattern="org.springframework.beans.factory.NoSuchBeanDefinitionException"/>
<xc:import pattern="org.springframework.context.ApplicationContext"/>
<xc:import pattern="org.springframework.web.context.support.WebApplicationContextUtils"/>

<xc:import pattern="javax.servlet.ServletContext"/>
<xc:import pattern="javax.servlet.ServletContextEvent"/>
<xc:import pattern="javax.servlet.ServletContextListener"/>
<xc:import pattern="java.util.HashMap"/>
<xc:import pattern="java.util.Map"/>

/**
 *
 * <xc:cap element="$project"/> Web Reload action
 *  
 * <p>StartupListener class used to initialize and database settings
 * and populate any application-wide drop-downs.
 * <p/>
 * <p>Keep in mind that this listener is executed outside of OpenSessionInViewFilter,
 * so if you're using Hibernate you'll have to explicitly initialize all loaded data at the
 * GenericDao or service level to avoid LazyInitializationException. Hibernate.initialize() works
 * well for doing this.
 *
 * @author <a href="mailto:matt@raibledesigns.com">Matt Raible</a>
 *
 * @generated
 */ 
public class StartupListener implements ServletContextListener {
	/**
	 * @generated
	 */ 
    private static final Log log = LogFactory.getLog(StartupListener.class);

	/**
	 * @generated
	 */ 
    @SuppressWarnings({"unchecked"})
    public void contextInitialized(ServletContextEvent event) {
        log.debug("initializing context...");

        ServletContext context = event.getServletContext();

        // Orion starts Servlets before Listeners, so check if the config
        // object already exists
        Map<String, Object> config = (HashMap<String, Object>) context.getAttribute(BaseConstants.CONFIG);

        if (config == null) {
            config = new HashMap<String, Object>();
        }
        
        if (context.getInitParameter(BaseConstants.CSS_THEME) != null) {
            config.put(BaseConstants.CSS_THEME, context.getInitParameter(BaseConstants.CSS_THEME));
        }

        ApplicationContext ctx =
            WebApplicationContextUtils.getRequiredWebApplicationContext(context);

        boolean encryptPassword = false;
        try {
            ProviderManager provider = (ProviderManager) ctx.getBean("authenticationManager");
            for (Object o : provider.getProviders()) {
                AuthenticationProvider p = (AuthenticationProvider) o;
                if (p instanceof RememberMeAuthenticationProvider) {
                    config.put("rememberMeEnabled", Boolean.TRUE);
                }
            }

            if (ctx.containsBean("passwordEncoder")) {
                encryptPassword = true;
                config.put(TaslakConstants.ENCRYPT_PASSWORD, Boolean.TRUE);
                String algorithm = "SHA";
                if (ctx.getBean("passwordEncoder") instanceof Md5PasswordEncoder) {
                    algorithm = "MD5";
                }
                config.put(TaslakConstants.ENC_ALGORITHM, algorithm);
            }
        } catch (NoSuchBeanDefinitionException n) {
            log.debug("authenticationManager bean not found, assuming test and ignoring...");
            // ignore, should only happen when testing
        }

        context.setAttribute(BaseConstants.CONFIG, config);

        // output the retrieved values for the Init and Context Parameters
        if (log.isDebugEnabled()) {
            log.debug("Remember Me Enabled? " + config.get("rememberMeEnabled"));
            log.debug("Encrypt Passwords? " + encryptPassword);
            if (encryptPassword) {
                log.debug("Encryption Algorithm: " + config.get(TaslakConstants.ENC_ALGORITHM));
            }
            log.debug("Populating drop-downs...");
        }

        setupContext(context);
    }

    /**
     * This method uses the LookupManager to lookup available roles from the data layer.
     * @param context The servlet context
	 * @generated
     */
    public static void setupContext(ServletContext context) {
        ApplicationContext ctx = WebApplicationContextUtils.getRequiredWebApplicationContext(context);
        LookupManager mgr = (LookupManager) ctx.getBean("lookupManager");

        // get list of possible roles
        context.setAttribute(TaslakConstants.AVAILABLE_ROLES, mgr.getAllRoles());
        log.debug("Drop-down initialization complete [OK]");
    }

    /**
     * Shutdown servlet context (currently a no-op method).
     *
     * @param servletContextEvent The servlet context event
	 * @generated
     */
    public void contextDestroyed(ServletContextEvent servletContextEvent) {
        //LogFactory.release(Thread.currentThread().getContextClassLoader());
        //Commented out the above call to avoid warning when SLF4J in classpath.
        //WARN: The method class org.apache.commons.logging.impl.SLF4JLogFactory#release() was invoked.
        //WARN: Please see http://www.slf4j.org/codes.html for an explanation.
    }
}
 