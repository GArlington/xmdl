<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" default-lazy-init="true" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

    <!-- Hibernate SessionFactory -->
    <bean class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean" id="sessionFactory">
        <property name="dataSource" ref="dataSource"/>
        <property name="annotatedClasses">
            <list>
                <!-- Mesken Beans -->
                <value>org.xmdl.mesken.model.User</value>
                <value>org.xmdl.mesken.model.Role</value>
                <!-- Application beans -->

                <value>org.xmdl.taslak.model.Order</value>

                <value>org.xmdl.taslak.model.OrderElement</value>

                <value>org.xmdl.taslak.model.Product</value>

                <value>org.xmdl.taslak.model.Profile</value>

                <value>org.xmdl.taslak.model.Supplier</value>
 
            </list>
        </property>
        <property name="hibernateProperties">
            <value>
                hibernate.dialect=${hibernate.dialect}
                hibernate.query.substitutions=true 'Y', false 'N'
                hibernate.cache.use_second_level_cache=true
                hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
            </value>
            <!-- Turn batching off for better error messages under PostgreSQL -->
            <!-- hibernate.jdbc.batch_size=0 -->
        </property>
    </bean>


    <!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
    <bean class="org.springframework.orm.hibernate3.HibernateTransactionManager" id="transactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- UniversalDao - can be used when doing standard CRUD - made available 
        for those who don't mind casting.  If you don't want to cast, look at 
        'fooDao' below. -->
    <bean class="org.xmdl.ida.lib.dao.hibernate.UniversalDaoHibernate" id="universalDao">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>


    <bean class="org.xmdl.taslak.dao.hibernate.OrderDAOHibernate" id="orderDAO">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean class="org.xmdl.taslak.dao.hibernate.OrderElementDAOHibernate" id="orderElementDAO">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean class="org.xmdl.taslak.dao.hibernate.ProductDAOHibernate" id="productDAO">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean class="org.xmdl.taslak.dao.hibernate.ProfileDAOHibernate" id="profileDAO">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean class="org.xmdl.taslak.dao.hibernate.SupplierDAOHibernate" id="supplierDAO">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
 

    <!-- If you want to be able to do simple CRUD for new domain objects without 
        having to cast, you don't have create a Dao interface and implementation 
        for that domain object, you simply have to do the following.  
        
        eg... 'fooDao'
    
    <bean id="fooDao" class="org.xmdl.taslak.dao.hibernate.GenericDaoHibernate">
        <constructor-arg value="org.xmdl.taslak.model.Foo"/>
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    You will need to create a Dao interface and implementation for that 
        domain object if you need more than simple CRUD to occur.  
        (finders, bulk update/delete, etc.)
    -->

    <!-- Add new DAOs here -->

</beans>
