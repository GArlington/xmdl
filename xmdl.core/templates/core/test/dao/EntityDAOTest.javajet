<%@ jet 
    package="org.xmdl.core.templates.test.dao.impl" 
    imports="java.util.* 
            org.xmdl.xmdl.*
            org.xmdl.gen.util.*
            org.eclipse.emf.codegen.util.*"
    class="DAOTestTemplateImpl" %>    
    
<%
    XClass xClass = (XClass) argument;
    XPackage xPackage = xClass.getXPackage(); 
    ClassHelper helper = XMDLEntityHelper.INSTANCE;
    TestHelper testHelper = TestHelper.INSTANCE;
    org.apache.log4j.Logger.getLogger(getClass()).debug(" generate ");    
    %>
<%ImportManager importManager=null;%>
<%if (helper.getQualifiedName(xPackage) != null) {%>
<%importManager = helper.makeImportManager(helper.getQualifiedName(xPackage));%>
package <%=helper.getQualifiedName(xPackage)%>.dao;
<%} else {%>
<%importManager = helper.makeImportManager("");%>
<%}%>

<%importManager.addImport("java.util.*");%>
<%importManager.addImport(helper.getQualifiedName(xPackage)+".model.*");%>
<%importManager.addImport(helper.getQualifiedName(xPackage)+".model.impl.*");%>
<%importManager.addImport("org.xmdl.lib.test.*");%>
<%importManager.addImport("org.xmdl.lib.dao.*");%>
<%importManager.addImport("org.hibernate.*");%>

<%
    StringBuffer importStringBuffer = stringBuffer;
    int importInsertionPoint = stringBuffer.length();
    importManager.addCompilationUnitImports(stringBuffer.toString());
%>

/**
 * DAO test for <%=helper.getCapName(xClass)%>
 * @generated
 */
public class <%=helper.getCapName(xClass)%>DAOTest extends BaseDAOTestCase<<%=helper.getCapName(xClass)%>> {

    /**
     * @generated
     */
    private <%=helper.getCapName(xClass)%>DAO dao;

    /**
     * @generated
     */
    public void setDAO(<%=helper.getCapName(xClass)%>DAO dao) {
        this.dao = dao;
    }

    /**
     * @generated
     */
    public void testLoad() throws Exception {
        <%=helper.getCapName(xClass)%> <%=helper.uncapName(xClass.getName())%> = dao.newEntity();
        <%=helper.uncapName(xClass.getName())%> = populate(<%=helper.uncapName(xClass.getName())%>);

        dao.dbModify(<%=helper.uncapName(xClass.getName())%>, identifier);
        assertNotNull(<%=helper.uncapName(xClass.getName())%>.getID());

        <%=helper.uncapName(xClass.getName())%> = dao.load(<%=helper.uncapName(xClass.getName())%>.getID(), identifier);

<%for (Iterator<XAttribute> i= xClass.getAttributes().iterator(); i.hasNext();) {
    XAttribute attribute = (XAttribute) i.next();%>
<%if (attribute.getType() != null && !attribute.isReference()) {%>
        assertEquals(<%=helper.uncapName(xClass.getName())%>.<%=helper.getGetAccessor(attribute)%>(), <%=testHelper.randomValueString(attribute)%>);
<%}//if (attribute.getType() !=null%>
<%}//for%>
    }

    /**
     * @generated
     */
    public void testLoadLazy() throws Exception {
        <%=helper.getCapName(xClass)%> <%=helper.uncapName(xClass.getName())%> = dao.newEntity();

        <%=helper.uncapName(xClass.getName())%> = dao.loadLazy(new Long(Integer.MIN_VALUE), identifier);

        //should not be null
        assertNotNull(<%=helper.uncapName(xClass.getName())%>);

        try {
<%for (Iterator<XAttribute> i= xClass.getAttributes().iterator(); i.hasNext();) {
    XAttribute attribute = (XAttribute) i.next();%>
<%if (attribute.getType() != null && !attribute.isReference()) {%>
            <%=helper.uncapName(xClass.getName())%>.<%=helper.getGetAccessor(attribute)%>();
<%}//if (attribute.getType() !=null%>
<%}//for%>
            fail("Must fall into exception, because entity is lazy-loaded");
        } catch (ObjectNotFoundException e) {
            assertNotNull(e);
        }
    }

    /**
     * @generated
     */
    public void testInsert() throws Exception {
        <%=helper.getCapName(xClass)%> <%=helper.uncapName(xClass.getName())%> = dao.newEntity();
        <%=helper.uncapName(xClass.getName())%> = populate(<%=helper.uncapName(xClass.getName())%>);
        dao.dbInsert(<%=helper.uncapName(xClass.getName())%>, identifier);

        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("inserted <%=helper.uncapName(xClass.getName())%>: " + <%=helper.uncapName(xClass.getName())%>);
        }

        assertTrue(<%=helper.uncapName(xClass.getName())%>.getID() > 0);
    }

    /**
     * @generated
     */
    public void testUpdate() throws Exception {
        <%=helper.getCapName(xClass)%> <%=helper.uncapName(xClass.getName())%> = dao.newEntity();
        <%=helper.uncapName(xClass.getName())%> = populate(<%=helper.uncapName(xClass.getName())%>);
        dao.dbInsert(<%=helper.uncapName(xClass.getName())%>, identifier);

        long id = <%=helper.uncapName(xClass.getName())%>.getID();

        <%=helper.uncapName(xClass.getName())%> = dao.load(id, identifier);

<%for (Iterator<XAttribute> i= xClass.getAttributes().iterator(); i.hasNext();) {
    XAttribute attribute = (XAttribute) i.next();%>
<%if (attribute.getType() != null && !attribute.isReference()) {%>
		<%=helper.getImportedAttributeType(attribute)%> test<%=helper.uncapSafeName(attribute)%> = <%=testHelper.randomValueString(attribute)%>;
        <%=helper.uncapName(xClass.getName())%>.set<%=helper.getAccessorName(attribute)%>(test<%=helper.uncapSafeName(attribute)%>);		
<%}//if (attribute.getType() !=null%>
<%}//for%>

        dao.dbUpdate(<%=helper.uncapName(xClass.getName())%>, identifier);

        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("updated <%=helper.uncapName(xClass.getName())%>: " + <%=helper.uncapName(xClass.getName())%>);
        }

<%for (Iterator<XAttribute> i= xClass.getAttributes().iterator(); i.hasNext();) {
    XAttribute attribute = (XAttribute) i.next();%>
<%if (attribute.getType() != null && !attribute.isReference()) {%>
        assertEquals(<%=helper.uncapName(xClass.getName())%>.<%=helper.getGetAccessor(attribute)%>(), test<%=helper.uncapSafeName(attribute)%>);
<%}//if (attribute.getType() !=null%>
<%}//for%>
    }

    /**
     * @generated
     */
    public void testModify() throws Exception {
        <%=helper.getCapName(xClass)%> <%=helper.uncapName(xClass.getName())%> = dao.newEntity();
        <%=helper.uncapName(xClass.getName())%> = populate(<%=helper.uncapName(xClass.getName())%>);
        dao.dbInsert(<%=helper.uncapName(xClass.getName())%>, identifier);

        long id = <%=helper.uncapName(xClass.getName())%>.getID();

        <%=helper.uncapName(xClass.getName())%> = dao.load(id, identifier);
        
<%for (Iterator<XAttribute> i= xClass.getAttributes().iterator(); i.hasNext();) {
    XAttribute attribute = (XAttribute) i.next();%>
<%if (attribute.getType() != null && !attribute.isReference()) {%>
		<%=helper.getImportedAttributeType(attribute)%> test<%=helper.uncapSafeName(attribute)%> = <%=testHelper.randomValueString(attribute)%>;
        <%=helper.uncapName(xClass.getName())%>.set<%=helper.getAccessorName(attribute)%>(test<%=helper.uncapSafeName(attribute)%>);		
<%}//if (attribute.getType() !=null%>
<%}//for%>
        
        //update
        dao.dbModify(<%=helper.uncapName(xClass.getName())%>, identifier);

        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("modified <%=helper.uncapName(xClass.getName())%>: " + <%=helper.uncapName(xClass.getName())%>);
        }

<%for (Iterator<XAttribute> i= xClass.getAttributes().iterator(); i.hasNext();) {
    XAttribute attribute = (XAttribute) i.next();%>
<%if (attribute.getType() != null && !attribute.isReference()) {%>
        assertEquals(<%=helper.uncapName(xClass.getName())%>.<%=helper.getGetAccessor(attribute)%>(), test<%=helper.uncapSafeName(attribute)%>);
<%}//if (attribute.getType() !=null%>
<%}//for%>

        <%=helper.uncapName(xClass.getName())%> = dao.newEntity();
        <%=helper.uncapName(xClass.getName())%> = populate(<%=helper.uncapName(xClass.getName())%>);
        
        //insert
<%for (Iterator<XAttribute> i= xClass.getAttributes().iterator(); i.hasNext();) {
    XAttribute attribute = (XAttribute) i.next();%>
<%if (attribute.getType() != null && !attribute.isReference()) {%>
        <%=helper.uncapName(xClass.getName())%>.set<%=helper.getAccessorName(attribute)%>(test<%=helper.uncapSafeName(attribute)%>);		
<%}//if (attribute.getType() !=null%>
<%}//for%>
        dao.dbModify(<%=helper.uncapName(xClass.getName())%>, identifier);

        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("modified <%=helper.uncapName(xClass.getName())%>: " + <%=helper.uncapName(xClass.getName())%>);
        }


<%for (Iterator<XAttribute> i= xClass.getAttributes().iterator(); i.hasNext();) {
    XAttribute attribute = (XAttribute) i.next();%>
<%if (attribute.getType() != null && !attribute.isReference()) {%>
        assertEquals(<%=helper.uncapName(xClass.getName())%>.<%=helper.getGetAccessor(attribute)%>(), test<%=helper.uncapSafeName(attribute)%>);
<%}//if (attribute.getType() !=null%>
<%}//for%>
        assertTrue(<%=helper.uncapName(xClass.getName())%>.getID() > 0);
    }

    /**
     * @generated
     */
    public void testDelete() throws Exception {
        <%=helper.getCapName(xClass)%> <%=helper.uncapName(xClass.getName())%> = dao.newEntity();
        <%=helper.uncapName(xClass.getName())%> = populate(<%=helper.uncapName(xClass.getName())%>);

        dao.dbModify(<%=helper.uncapName(xClass.getName())%>, identifier);

        assertNotNull(<%=helper.uncapName(xClass.getName())%>.getID());
<%for (Iterator<XAttribute> i= xClass.getAttributes().iterator(); i.hasNext();) {
    XAttribute attribute = (XAttribute) i.next();%>
<%if (attribute.getType() != null && !attribute.isReference()) {%>
        assertEquals(<%=helper.uncapName(xClass.getName())%>.<%=helper.getGetAccessor(attribute)%>(), <%=testHelper.randomValueString(attribute)%>);
<%}//if (attribute.getType() !=null%>
<%}//for%>

        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("removing <%=helper.uncapName(xClass.getName())%>:" + <%=helper.uncapName(xClass.getName())%>);
        }

        dao.dbDelete(<%=helper.uncapName(xClass.getName())%>, identifier);

        try {
            <%=helper.uncapName(xClass.getName())%> = dao.load(<%=helper.uncapName(xClass.getName())%>.getID(), identifier);
            fail("Entity found in database");
        } catch (DataAccessException dae) {
            LOGGER.debug("Expected exception: " + dae.getMessage());
            assertNotNull(dae);
        }
    }


    /**
     * @generated
     */
    public void testFindAll() throws Exception {
        int size = 10;
        for (int i = 0; i < size; i++) {
            <%=helper.getCapName(xClass)%> <%=helper.uncapName(xClass.getName())%> = dao.newEntity();
            <%=helper.uncapName(xClass.getName())%> = populate(<%=helper.uncapName(xClass.getName())%>);
            dao.dbInsert(<%=helper.uncapName(xClass.getName())%>, identifier);
        }

        List<<%=helper.getCapName(xClass)%>> results = dao.findAll(identifier);
        assertTrue(results.size() >= size);
    }

    /**
     * @generated
     */
    public void testFindByExample() throws Exception {
        int size = 10;
        for (int i = 0; i < size; i++) {
            <%=helper.getCapName(xClass)%> <%=helper.uncapName(xClass.getName())%> = dao.newEntity();
            <%=helper.uncapName(xClass.getName())%> = populate(<%=helper.uncapName(xClass.getName())%>);
            dao.dbInsert(<%=helper.uncapName(xClass.getName())%>, identifier);
        }

        <%=helper.getCapName(xClass)%> example = dao.newEntity();
        example = populate(example);

        List<<%=helper.getCapName(xClass)%>> results = dao.findByExample(example, identifier);
        assertTrue(results.size() >= size);
    }

    /**
     * @generated
     */
    public void testFindByPrimaryKey() throws Exception {
        int size = 10;
        Long[] pKeys = new Long[10];
        for (int i = 0; i < size; i++) {
            <%=helper.getCapName(xClass)%> <%=helper.uncapName(xClass.getName())%> = dao.newEntity();
            <%=helper.uncapName(xClass.getName())%> = populate(<%=helper.uncapName(xClass.getName())%>);
            dao.dbInsert(<%=helper.uncapName(xClass.getName())%>, identifier);
            pKeys[i] = <%=helper.uncapName(xClass.getName())%>.getID();
        }

        List<<%=helper.getCapName(xClass)%>> results = dao.findAll(pKeys, identifier);
        assertTrue(results.size() >= size);
    }

    /**
     * @generated
     */
    public void testSearch() throws Exception {
        int size = 10;
        for (int i = 0; i < size; i++) {
            <%=helper.getCapName(xClass)%> <%=helper.uncapName(xClass.getName())%> = dao.newEntity();
            <%=helper.uncapName(xClass.getName())%> = populate(<%=helper.uncapName(xClass.getName())%>);
            dao.dbInsert(<%=helper.uncapName(xClass.getName())%>, identifier);
        }

        <%=helper.getCapName(xClass)%>Search searchBean = new <%=helper.getCapName(xClass)%>SearchImpl();
        
<%for (Iterator<XAttribute> i= xClass.getAttributes().iterator(); i.hasNext();) {
    XAttribute attribute = (XAttribute) i.next();%>
<%if (attribute.getType() != null && !attribute.isReference() && !attribute.getType().isComparable()) {%>
        searchBean.set<%=helper.getAccessorName(attribute)%>(<%=testHelper.randomValueStringTrimmed(attribute, 2)%>);
<%}//if (attribute.getType() !=null%>
<%}//for%>        

        List<<%=helper.getCapName(xClass)%>> results = dao.search(searchBean, identifier);
        assertTrue(results.size() >= size);
    }
}
<%importStringBuffer.insert(importInsertionPoint, importManager.computeSortedImports());%>