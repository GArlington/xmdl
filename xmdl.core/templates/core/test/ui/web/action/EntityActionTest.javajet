<%@ jet 
    package="chrome.xmdl.core.templates.test.ui.web.action.impl" 
    imports="java.util.* 
            chrome.xmdl.* 
            chrome.xmdl.gen.util.*
			chrome.xmdl.core.util.*
            org.eclipse.emf.codegen.util.*"
    class="EntityActionTestImpl" 
%><%
    XClass xClass = (XClass) argument;
    XPackage xPackage = xClass.getXPackage();
    XProject  xProject = xPackage.getProject(); 
     
    DBHelper dbHelper = XMDLDBHelper.INSTANCE;    
    ClassHelper helper = XMDLClassHelper.INSTANCE;
    TestHelper testHelper = TestHelper.INSTANCE;    
    org.apache.log4j.Logger.getLogger(getClass()).debug(" generate ");    
    %>
<%ImportManager importManager=null;%> 
<%if (helper.getQualifiedName(xPackage) != null) {%>
<%importManager = helper.makeImportManager(helper.getQualifiedName(xPackage));%>
package <%=helper.getQualifiedName(xPackage)%>.ui.web.action;
<%} else {%>
<%importManager = helper.makeImportManager("");%>
<%}%>

<%importManager.addImport(xPackage.getName() + ".ui.web.form.*");%>
<%importManager.addImport("chrome.xmdl.lib.test.*");%>
<%importManager.addImport("org.apache.struts.action.*");%>

<%
    StringBuffer importStringBuffer = stringBuffer;
    int importInsertionPoint = stringBuffer.length();
    importManager.addCompilationUnitImports(stringBuffer.toString());
%>

/** 
 * $Id$
 * @generated
 */
public class <%=helper.getCapName(xClass)%>ActionTest extends BaseActionTest implements Constants {

    public <%=helper.getCapName(xClass)%>ActionTest(String name) {
        super(name);
    }

	/** 
	 * @generated
	 */
    public void testDelete() throws Exception {
        //test simple delete
        setRequestPathInfo("/edit<%=helper.getCapName(xClass)%>");
        addRequestParameter("method", "Delete");
        actionPerform();

        verifyForward("list");

        assertNotNull(getSession().getAttribute(<%=helper.capAllName(xClass.getName())%>_LIST));
        ActionForm actionForm = getActionForm();

        assertNotNull(actionForm);
        assertTrue(actionForm instanceof <%=helper.getCapName(xClass)%>Form);

        verifyActionMessages(new String[] {"chrome.xmdl.demo.model.<%=helper.getCapName(xClass)%>.deleted"});
        verifyNoActionErrors();
    }

	/** 
	 * @generated
	 */
    public void testCancel() {
        //test cancel
        setRequestPathInfo("/edit<%=helper.getCapName(xClass)%>");
        addRequestParameter("method", "Cancel");
        actionPerform();

        Object entity = getSession().getAttribute(<%=helper.capAllName(xClass.getName())%>_ENTITY);
        assertNull(entity);

        verifyForward("list");
    }

	/** 
	 * @generated
	 */
    public void testSave() {
        //test save
        setRequestPathInfo("/edit<%=helper.getCapName(xClass)%>");
        addRequestParameter("method", "Save");
        addRequestParameter("<%=helper.uncapSafeName(xClass)%>.ID", "");
        
<%for (Iterator i= xClass.getAttributes().iterator(); i.hasNext();) {
    XAttribute attribute = (XAttribute) i.next();%>
<%if (attribute.getType() != null && !attribute.isReference()) {%>
        addRequestParameter("<%=helper.uncapSafeName(xClass)%>.<%=helper.uncapSafeName(attribute)%>", "<%=testHelper.randomValuePlain(attribute)%>");
<%}//if (attribute.getType() !=null%>
<%}//for%>        

        actionPerform();

        verifyForward("list");

        assertNotNull(getSession().getAttribute(<%=helper.capAllName(xClass.getName())%>_LIST));
        assertNotNull(getSession().getAttribute(<%=helper.capAllName(xClass.getName())%>_ENTITY));
        ActionForm actionForm = getActionForm();

        assertNotNull(actionForm);
        assertTrue(actionForm instanceof <%=helper.getCapName(xClass)%>Form);

        verifyActionMessages(new String[] {"chrome.xmdl.demo.model.<%=helper.getCapName(xClass)%>.updated"});
        verifyNoActionErrors();

    }

	/** 
	 * @generated
	 */
    public void testSearch() {
        //test search
        setRequestPathInfo("/search<%=helper.getCapName(xClass)%>");
        addRequestParameter("method", "Search");

<%for (Iterator i= xClass.getAttributes().iterator(); i.hasNext();) {
    XAttribute attribute = (XAttribute) i.next();%>
<%if (attribute.getType() != null && !attribute.isReference()) {%>
        addRequestParameter("<%=helper.uncapSafeName(xClass)%>.<%=helper.uncapSafeName(attribute)%>", "<%=testHelper.randomValuePlain(attribute)%>");
<%}//if (attribute.getType() !=null%>
<%}//for%>        

        actionPerform();

        verifyForward("success");

        assertNotNull(getRequest().getAttribute(Constants.<%=helper.capAllName(xClass.getName())%>_LIST));
        verifyNoActionErrors();
    }

	/** 
	 * @generated
	 */
    public void testEdit() {
        //test simple edit
        setRequestPathInfo("/edit<%=helper.getCapName(xClass)%>");
        addRequestParameter("method", "Edit");
        actionPerform();

        verifyForward("success");

        assertNotNull(getSession().getAttribute(<%=helper.capAllName(xClass.getName())%>_LIST));
        ActionForm actionForm = getActionForm();

        assertNotNull(actionForm);
        assertTrue(actionForm instanceof <%=helper.getCapName(xClass)%>Form);

        verifyNoActionErrors();
    }
}
<%importStringBuffer.insert(importInsertionPoint, importManager.computeSortedImports());%>
