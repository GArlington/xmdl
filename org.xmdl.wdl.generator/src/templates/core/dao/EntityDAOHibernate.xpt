«IMPORT wdl»

«EXTENSION templates::Extensions»
«EXTENSION templates::IDAExtensions»

«DEFINE entity FOR wdl::Entity»
  «FILE "core/src/main/java/org/xmdl/taslak/dao/hibernate/"+ this.name + "DAOHibernate.java"»
package org.xmdl.taslak.dao.hibernate;

import org.xmdl.ida.lib.dao.hibernate.GenericDaoHibernate;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;
import org.apache.commons.lang.StringUtils;
import java.util.*;
import org.xmdl.mesken.model.*;

import org.xmdl.taslak.model.*;
import org.xmdl.taslak.model.search.*;
import org.xmdl.taslak.dao.*;

/**
 *
 * «this.name» DAO Hibernate implementation
 *  
 * $Id$
 *
 */ 
public class «this.name»DAOHibernate extends GenericDaoHibernate<«this.name», Long> implements «this.name»DAO {

    /**
     * Public default constructor
     */ 
    public «this.name»DAOHibernate() {
        super(«this.name».class);
    }

    public Collection<«this.name»> search(«this.name»Search «this.name.toFirstLower()»Search) {
        if (log.isDebugEnabled()) {
            log.debug("search(«this.name»Search «this.name.toFirstLower()»Search) <-");
            log.debug("«this.name.toFirstLower()»Search: " + «this.name.toFirstLower()»Search);
        }
        
        Collection<«this.name»> list = null;
        if («this.name.toFirstLower()»Search == null) {
            list = new ArrayList<«this.name»>();
        } else {
    «FOREACH this.attributes AS attribute»
    «IF !attribute.isEmbed()»
        «IF attribute.isComparable()»
            «attribute.type.simpleName()» min«attribute.name.toFirstUpper()» = «this.name.toFirstLower()»Search.get«attribute.name.toFirstUpper()»Min();
            «attribute.type.simpleName()» max«attribute.name.toFirstUpper()» = «this.name.toFirstLower()»Search.get«attribute.name.toFirstUpper()»Max();
        «ELSE»
            «attribute.type.simpleName()» «attribute.name.toFirstLower()» = «this.name.toFirstLower()»Search.get«attribute.name.toFirstUpper()»();
        «ENDIF»
    «ENDIF»
    «ENDFOREACH»

            if (log.isDebugEnabled()) {
                log.debug("search(«this.name»Search <-");
«FOREACH this.attributes AS attribute»
    «IF!attribute.isEmbed()»
        «IF attribute.isComparable()»
                log.debug("min«attribute.name.toFirstUpper()»       : " + min«attribute.name.toFirstUpper()»);
                log.debug("max«attribute.name.toFirstUpper()»       : " + max«attribute.name.toFirstUpper()»);
        «ELSE»
                log.debug("«attribute.name.toFirstLower()»       : " + «attribute.name.toFirstLower()»);
        «ENDIF»
    «ENDIF»
«ENDFOREACH»
            }

                Session session = getSession();
                Criteria criteria = session.createCriteria(«this.name».class);
«FOREACH this.attributes AS attribute»
    «IF!attribute.isEmbed()-»
	    «IF attribute.isReference()-»
	            if («attribute.name.toFirstLower()» != null){
	                Criteria subCriteria = criteria.createCriteria("«attribute.name.toFirstLower()»");
	                subCriteria.add(Restrictions.idEq(«attribute.name.toFirstLower()».getId()));
	            }
	    «ELSE-»
	        «IF attribute.isComparable()-»
	            if (min«attribute.name.toFirstUpper()» != null)
	                criteria.add(Restrictions.ge("«attribute.name.toFirstLower()»", min«attribute.name.toFirstUpper()»));
	            if (max«attribute.name.toFirstUpper()» != null)
	                criteria.add(Restrictions.le("«attribute.name.toFirstLower()»", max«attribute.name.toFirstUpper()»));
	        «ELSEIF attribute.type == 'String'-»
	            if (!StringUtils.isEmpty(«attribute.name.toFirstLower()»))
	                criteria.add(Restrictions.eq("«attribute.name.toFirstLower()»", «attribute.name.toFirstLower()»));
	        «ELSE-»
	            if («attribute.name.toFirstLower()» != null)
	                criteria.add(Restrictions.eq("«attribute.name.toFirstLower()»", «attribute.name.toFirstLower()»));
	        «ENDIF-»
	    «ENDIF-»
    «ENDIF-»
«ENDFOREACH» 
            list = criteria.list();

        }

        if (log.isDebugEnabled())
            log.debug("search(«this.name»Search «this.name.toFirstLower()»Search) ->");
        return list;
    }
}
  «ENDFILE»
«ENDDEFINE»
