/*
 * generated by Xtext
 */
package org.xmdl.labeling;

import org.eclipse.xtext.ui.core.DefaultLabelProvider;
import org.xmdl.wdl.Attribute;
import org.xmdl.wdl.Embed;
import org.xmdl.wdl.Entity;
import org.xmdl.wdl.Enumeration;
import org.xmdl.wdl.EnumerationLiteral;
import org.xmdl.wdl.Model;
import org.xmdl.wdl.Project;
import org.xmdl.wdl.SimpleType;
import org.xmdl.wdl.Type;
import org.xmdl.wdl.gen.utils.ExtensionUtils;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class WDLLabelProvider extends DefaultLabelProvider {
	public String image(Type x) {
		return "full/obj16/SimpleType.gif";
	}

	public String image(Model x) {
		return "full/obj16/Model.gif";
	}

	public String image(Project x) {
		return "full/obj16/Project.gif";
	}

	public String image(SimpleType type) {
		return "full/obj16/SimpleType.gif";
	}

	public String image(Entity x) {
		if (ExtensionUtils.isChild(x))
			return "full/obj16/EntityChild";
		return "full/obj16/Entity.gif";
	}

	public String image(Enumeration x) {
		return "full/obj16/Enumeration.gif";
	}

	public String image(Embed x) {
		return "full/obj16/Embed.gif";
	}

	public String image(EnumerationLiteral x) {
		return "full/obj16/EnumerationLiteral.gif";
	}

	public String image(Attribute x) {
		Type type = x.getType();
		if (ExtensionUtils.isChild(type))
			return "full/obj16/AttributeChild.gif";
		if (ExtensionUtils.isMaster(x))
			return "full/obj16/AttributeMaster.gif";
		if (ExtensionUtils.isEmbed(type))
			return "full/obj16/AttributeEmbed.gif";
		if (ExtensionUtils.isReference(type))
			return "full/obj16/AttributeReference.gif";
		if (ExtensionUtils.isBasic(type))
			return "full/obj16/AttributeSimpleType.gif";
		return "full/obj16/Attribute.gif";
	}

	public String text(Attribute x) {
		StringBuffer sb = new StringBuffer();
		sb.append(x.getName());
		Type type = x.getType();
		if (type != null) {
			sb.append(" : ").append(type.getName());
		}
		return sb.toString();
	}

	public String text(Model x) {
		StringBuffer sb = new StringBuffer();
		Project project = x.getProject();
		if (project != null && project.getName() != null) {
			sb.append(project.getName());
			String basePackage = project.getBasePackage();
			if (basePackage != null) {
				sb.append(" (").append(basePackage).append(")");
			}
		} else {
			sb.append("Model");
		}
		return sb.toString();
	}

}
