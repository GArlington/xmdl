<%@taglib prefix="c" id="org.eclipse.jet.controlTags" %>
<%@taglib prefix="w" id="org.eclipse.jet.workspaceTags" %>
<%@taglib prefix="j" id="org.eclipse.jet.javaTags" %>
<%@taglib prefix="f" id="org.eclipse.jet.formatTags" %>
<%@taglib prefix="xc" id="xmdl.genext.xmdlClass" %>
<%@taglib prefix="tu" id="xmdl.genext.testUtils" %>
<%@ jet 
	package="org.xmdl.ida.templates.core.test" 
	class="EntityDAOTestImpl" 
	%><%
    org.apache.log4j.Logger.getLogger(getClass()).debug(" generate ");    
%>
package <xc:qualifiedName element="$class/xPackage"/>.dao;

<j:importsLocation package=""/>

<xc:import pattern="java.util.Collection"/>
<xc:import pattern="org.springframework.dao.DataAccessException"/>
<xc:import pattern="org.xmdl.ida.lib.test.BaseDaoTestCase"/>

<xc:import pattern="$element.model.*" element="$class/xPackage"/>
<xc:import pattern="$element.model.search.*" element="$class/xPackage"/>

/**
 *
 * <xc:cap element="$class"/> DAO Test Case
 *  
 * $Id$
 *
 * @generated
 */ 
public class <xc:cap element="$class"/>DAOTest extends BaseDaoTestCase {

    private <xc:cap element="$class"/>DAO <xc:uncap element="$class"/>DAO = null;

    public void set<xc:cap element="$class"/>DAO(<xc:cap element="$class"/>DAO <xc:uncap element="$class"/>DAO) {
        this.<xc:uncap element="$class"/>DAO = <xc:uncap element="$class"/>DAO;
    }

    public void testAddAndRemove<xc:cap element="$class"/>() throws Exception {
        <xc:cap element="$class"/> <xc:uncap element="$class"/> = new <xc:cap element="$class"/>();

<c:iterate select="$class/attributes" var="attribute">
	<c:if test="not($attribute/reference)">
        <xc:uncap element="$class"/>.<xc:mutator attribute="$attribute"/>(<tu:random  attribute="$attribute" wrapString="true" />);
	</c:if>
</c:iterate> 

        <xc:uncap element="$class"/> = <xc:uncap element="$class"/>DAO.save(<xc:uncap element="$class"/>);
        flush();

        <xc:uncap element="$class"/> = <xc:uncap element="$class"/>DAO.get(<xc:uncap element="$class"/>.getId());

        assertNotNull(<xc:uncap element="$class"/>.getId());
<c:iterate select="$class/attributes" var="attribute">
	<c:if test="not($attribute/reference)">
		assertEquals(<tu:random  attribute="$attribute" wrapString="true" />, <xc:uncap element="$class"/>.<xc:accessor attribute="$attribute"/>());
	</c:if>
</c:iterate> 

        log.debug("removing <xc:uncap element="$class"/>...");
        <xc:uncap element="$class"/>DAO.remove(<xc:uncap element="$class"/>.getId());
        flush();

        try {
            <xc:uncap element="$class"/>DAO.get(<xc:uncap element="$class"/>.getId());
            fail("<xc:cap element="$class"/> found in database");
        } catch (DataAccessException dae) {
            log.debug("Expected exception: " + dae.getMessage());
            assertNotNull(dae);
        }
    }

    public void testSearch() throws Exception {
        ProductSearch search = new ProductSearch();
    <c:iterate select="$class/attributes" var="attribute">
	<c:if test="not($attribute/reference)">
        search.<xc:mutator attribute="$attribute"/>(<tu:random  attribute="$attribute" wrapString="true" />);
	</c:if>
	</c:iterate>
        Collection<<xc:cap element="$class"/>> <xc:uncap element="$class"/>s = <xc:uncap element="$class"/>DAO.search(search);
        assertTrue(<xc:uncap element="$class"/>s.size() > 0);
    }

    protected void onSetUpBeforeTransaction() throws Exception {
        super.onSetUpBeforeTransaction();

        <xc:cap element="$class"/> <xc:uncap element="$class"/> = new <xc:cap element="$class"/>();
<c:iterate select="$class/attributes" var="attribute">
	<c:if test="not($attribute/reference)">
        <xc:uncap element="$class"/>.<xc:mutator attribute="$attribute"/>(<tu:random  attribute="$attribute" wrapString="true" />);
	</c:if>
</c:iterate> 
        <xc:uncap element="$class"/>DAO.save(<xc:uncap element="$class"/>);
    }

}
