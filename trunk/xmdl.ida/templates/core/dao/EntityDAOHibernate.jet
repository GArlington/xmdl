<%@jet 
	package="org.xmdl.ida.templates.core.dao" 
	class="EntityDAOHibernateImpl" 
    imports="java.util.*
    		chrome.xmdl.*
            chrome.xmdl.gen.util.*
            org.eclipse.emf.codegen.util.*
			"
	%><%
    XClass xClass = (XClass) context.getVariable("argument");
    XPackage xPackage = xClass.getXPackage(); 
    ClassHelper helper = XMDLClassHelper.INSTANCE;
    org.apache.log4j.Logger.getLogger(getClass()).debug(" generate ");    
%>
package <%=helper.getQualifiedName(xPackage)%>.dao;

<%ImportManager importManager=null;%>
<%if (helper.getQualifiedName(xPackage) != null) {%>
<%importManager = helper.makeImportManager(helper.getQualifiedName(xPackage));%>
package <%=helper.getQualifiedName(xPackage)%>.dao.hibernate;
<%} else {%>
<%importManager = helper.makeImportManager("");%>
<%}%>

<%importManager.addImport("org.xmdl.ida.lib.dao.hibernate.GenericDaoHibernate");%>
<%importManager.addImport(helper.getQualifiedName(xPackage)+".dao.*");%>
<%importManager.addImport(helper.getQualifiedName(xPackage)+".model.*");%>
<%importManager.addImport(helper.getQualifiedName(xPackage)+".model.search.*");%>

<%importManager.addImport("org.hibernate.*");%>
<%importManager.addImport("org.hibernate.criterion.*");%>

<%importManager.addImport("java.util.*");%>
/**
 *
 * <%=helper.getCapName(xClass)%> DAO Hibernate implementation
 *  
 * $Id$
 *
 * @generated
 */ 
public class <%=helper.getCapName(xClass)%>DAOHibernate extends GenericDaoHibernate<<%=helper.getCapName(xClass)%>, Long> implements <%=helper.getCapName(xClass)%>Dao {

    public <%=helper.getCapName(xClass)%>DAOHibernate() {
        super(<%=helper.getCapName(xClass)%>.class);
    }

    public Collection<<%=helper.getCapName(xClass)%>> search(<%=helper.getCapName(xClass)%>Search <%=helper.uncapSafeName(xClass)%>Search) {
    	if (log.isDebugEnabled()) {
    		log.debug("search(<%=helper.getCapName(xClass)%>Search <%=helper.uncapSafeName(xClass)%>Search) <-");
        	log.debug("<%=helper.uncapSafeName(xClass)%>Search: " + <%=helper.uncapSafeName(xClass)%>Search);
    	}
    	
		Collection<<%=helper.getCapName(xClass)%>> list = null;
		if (<%=helper.uncapSafeName(xClass)%>Search == null) {
			list = new ArrayList<<%=helper.getCapName(xClass)%>>();
		} else {
<%for (Iterator<XAttribute> i= xClass.getAttributes().iterator(); i.hasNext();) {
	XAttribute attribute = (XAttribute) i.next();
	if (!attribute.isReference()) {
		XType type = attribute.getType();
		boolean comparable = type.isComparable();%>
		<%if (comparable){%>
	<%=helper.getImportedAttributeType(attribute)%> min<%=helper.getCapName(attribute)%> = <%=helper.uncapSafeName(xClass)%>Search.<%=helper.getGetAccessor(attribute)%>Min();
	<%=helper.getImportedAttributeType(attribute)%> max<%=helper.getCapName(attribute)%> = <%=helper.uncapSafeName(xClass)%>Search.<%=helper.getGetAccessor(attribute)%>Max();
		<%} else {%>
	<%=helper.getImportedAttributeType(attribute)%> <%=helper.uncapSafeName(attribute)%> = <%=helper.uncapSafeName(xClass)%>Search.<%=helper.getGetAccessor(attribute)%>();
		<%}%>
	<%}%>
<%}//for%>

			list = search(name, fromPrice, toPrice, productType);
		}

		if (log.isDebugEnabled())
			log.debug("search(<%=helper.getCapName(xClass)%>Search <%=helper.uncapSafeName(xClass)%>Search) ->");
    	return list;
    }

<%
	StringBuffer params = new StringBuffer();
   	for (Iterator<XAttribute> i= xClass.getAttributes().iterator(); i.hasNext();) {
		XAttribute attribute = (XAttribute) i.next();
		if (!attribute.isReference()) {
			XType type = attribute.getType();
			boolean comparable = type.isComparable();
			if (comparable){
				params.append(helper.getImportedAttributeType(attribute));
				params.append(" min");
				params.append(helper.getCapName(attribute));
				params.append(", ");
				params.append(helper.getImportedAttributeType(attribute));
				params.append(" max");
				params.append(helper.getCapName(attribute));
			} else {
				params.append(helper.getImportedAttributeType(attribute));
				params.append(" ");
				params.append(helper.uncapSafeName(attribute));
			}
			if (i.hasNext()) params.append(", ");
		}
	}//for
%>

    public Collection<<%=helper.getCapName(xClass)%>> search(<%=params%>) {
    	if (log.isDebugEnabled()) {
    		log.debug("search(<%=params%>) <-");
<%for (Iterator<XAttribute> i= xClass.getAttributes().iterator(); i.hasNext();) {
	XAttribute attribute = (XAttribute) i.next();
	if (!attribute.isReference()) {
		XType type = attribute.getType();
		boolean comparable = type.isComparable();%>
		<%if (comparable){%>
        	log.debug("min<%=helper.getCapName(attribute)%>       : " + min<%=helper.getCapName(attribute)%>);
        	log.debug("max<%=helper.getCapName(attribute)%>       : " + max<%=helper.getCapName(attribute)%>);
		<%} else {%>
        	log.debug("<%=helper.uncapSafeName(attribute)%>       : " + <%=helper.uncapSafeName(attribute)%>);
		<%}%>
	<%}%>
<%}//for%>
    	}
    	
        Criteria criteria = getSession().createCriteria(<%=helper.getCapName(xClass)%>.class);
<%for (Iterator<XAttribute> i= xClass.getAttributes().iterator(); i.hasNext();) {
	XAttribute attribute = (XAttribute) i.next();
	if (!attribute.isReference()) {
		XType type = attribute.getType();
		boolean comparable = type.isComparable();
		boolean string = type.getClassName() == "java.lang.String";%>
		<%if (string){%>
        if (<%=helper.uncapSafeName(attribute)%> != null && !<%=helper.uncapSafeName(attribute)%>.equals(""))
            criteria.add(Restrictions.like("<%=helper.uncapSafeName(attribute)%>", "%" + <%=helper.uncapSafeName(attribute)%> + "%"));
		<%} else if (comparable){%>
        if (min<%=helper.getCapName(attribute)%> != null)
            criteria.add(Restrictions.ge("<%=helper.uncapSafeName(attribute)%>", min<%=helper.getCapName(attribute)%>));
        if (max<%=helper.getCapName(attribute)%> != null)
            criteria.add(Restrictions.le("<%=helper.uncapSafeName(attribute)%>", max<%=helper.getCapName(attribute)%>));
		<%} else {%>
        if (<%=helper.uncapSafeName(attribute)%> != null)
            criteria.add(Restrictions.eq("<%=helper.uncapSafeName(attribute)%>", <%=helper.uncapSafeName(attribute)%>));
		<%}%>
	<%}%>
<%}//for%>

        List<<%=helper.getCapName(xClass)%>> list = criteria.list();
        
        if (log.isDebugEnabled()) log.debug("search(<%=params%>) <-");
		return list;
    }

}
