<%@taglib prefix="c" id="org.eclipse.jet.controlTags" %>
<%@taglib prefix="j" id="org.eclipse.jet.javaTags" %>
<%@taglib prefix="xc" id="org.xmdl.genext.xmdlClass" %>
<%@taglib prefix="xd" id="org.xmdl.genext.xmdlDB" %>
<%@taglib prefix="ida" id="org.xmdl.ida.idaUtils" %>
<%@jet 
    package="org.xmdl.ida.templates.core.model" 
    class="EntityImpl"  
    %><%
    org.apache.log4j.Logger.getLogger(getClass()).debug(" generate ");    
%>
package <xc:qualifiedName element="$class/xPackage"/>.model;

<j:importsLocation package=""/>

<xc:import pattern="javax.persistence.*"/>
<xc:import pattern="org.xmdl.ida.lib.model.BaseObject"/>
<xc:import pattern="org.hibernate.annotations.Type"/>
<xc:import pattern="org.hibernate.annotations.Parameter"/>
<xc:import pattern="java.io.Serializable"/>
<xc:import pattern="java.text.MessageFormat"/>
<xc:import pattern="java.util.*"/>


/**
 *
 * <xc:cap element="$class"/> entity bean
 *  
 * $Id$
 *
 * @generated
 */ 
@Entity (name=("<xd:tableName class="$class"/>"))
public class <xc:cap element="$class"/> extends BaseObject implements Serializable, Cloneable {

    /** 
     * Unique identifier
     * 
     * @generated
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = ("ID"))
    private Long id;

<c:iterate select="$class/attributes" var="attribute">
    /** 
     * @generated
     */
    <c:if test="not(call($attribute, 'isReference'))">
    @Column(name = ("<xd:columnName attribute="$attribute"/>"), length = <xd:columnLength attribute="$attribute"/><c:if test="isEnumeration($attribute)">, columnDefinition = "integer", nullable = false</c:if>)
	    <c:if test="isEnumeration($attribute)">
    @Type(
            type = "org.xmdl.ida.lib.dao.hibernate.GenericEnumUserType",
            parameters = {
            @Parameter(
                    name = "enumClass",
                    value = "<xc:qualifiedName element="$attribute/type/xPackage"/>.model.<xc:cap element="$attribute/type"/>"),
            @Parameter(
                    name = "identifierMethod",
                    value = "toInt"),
            @Parameter(
                    name = "valueOfMethod",
                    value = "fromInt")
                    }
    )
	    </c:if>
    </c:if>
    <c:if test="call($attribute, 'isReference')">
    <ida:association attribute="$attribute" />
    </c:if>
    private <xc:attributeType attribute="$attribute" wrapType="true"/> <xc:uncap element="$attribute"/>;
    
</c:iterate> 

    /** 
     * @generated
     */
    public <xc:cap element="$class"/>() {
    }

    /** 
     * @generated
     */
    public Long getId() {
        return id;
    }

    /** 
     * @generated
     */
    public void setId(Long id) {
        this.id = id;
    }

<c:iterate select="$class/attributes" var="attribute">
    /** 
     * @generated
     */
    public <xc:attributeType attribute="$attribute" wrapType="true"/> get<xc:cap element="$attribute"/>() {
        return <xc:uncap element="$attribute"/>;
    }

    /** 
     * @generated
     */
    public void set<xc:cap element="$attribute"/>(<xc:attributeType attribute="$attribute" wrapType="true"/> <xc:uncap element="$attribute"/>) {
        this.<xc:uncap element="$attribute"/> = <xc:uncap element="$attribute"/>;
    }

</c:iterate> 

    /** 
     * @generated
     */
    public String toString() {
        return MessageFormat.format("<xc:cap element="$class"/> [id={0}]<%int i=0;%><c:iterate select="$class/attributes" var="attribute"><c:if test="not(call($attribute, 'isReference'))">[<xc:uncap element="$attribute"/>={<%=++i%>}]</c:if></c:iterate>", id<c:iterate select="$class/attributes" var="attribute"><c:if test="not(call($attribute, 'isReference'))">, <xc:uncap element="$attribute"/></c:if></c:iterate>);
    }

    /** 
     * @generated
     */
    public boolean equals(Object o) {
        return o instanceof <xc:cap element="$class"/> && ((<xc:cap element="$class"/>) o).getId() == this.getId();
    }

    /** 
     * @generated
     */
    public int hashCode() {
        int result = 1;
        if (id != null) result = 31 * result + id.hashCode();
<c:iterate select="$class/attributes" var="attribute">
	<c:if test="not(call($attribute, 'isReference'))">
	    <c:choose>
	    <c:when test="call($attribute/type, 'isPrimitive')">
        if (<xc:uncap element="$attribute"/> != null) result = 31 * result + ("" + <xc:uncap element="$attribute"/>).hashCode();
	    </c:when>
	    <c:otherwise>
        if (<xc:uncap element="$attribute"/> != null) result = 31 * result + <xc:uncap element="$attribute"/>.hashCode();
	    </c:otherwise>
	    </c:choose>
    </c:if> 
</c:iterate>
        return result;
    }

    /** 
     * @generated
     */
     public <xc:cap element="$class"/> createClone() {
     	try {
     		return (<xc:cap element="$class"/>) clone();
		} catch (CloneNotSupportedException e) {
			<xc:cap element="$class"/> copy = new <xc:cap element="$class"/>();
<c:iterate select="$class/attributes" var="attribute">
	<c:if test="not(call($attribute, 'isReference'))">
			copy.<xc:uncap element="$attribute"/> = this.<xc:uncap element="$attribute"/>;
	</c:if> 
</c:iterate>
			return copy;
		}
     }

}
