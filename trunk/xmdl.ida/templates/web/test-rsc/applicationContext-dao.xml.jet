<%@taglib prefix="c" id="org.eclipse.jet.controlTags" %>
<%@taglib prefix="xc" id="org.xmdl.genext.xmdlClass" %>
<%@ jet 
    package="org.xmdl.ida.templates.web.test.rsc" 
    class="ApplicationContextDAOXMLImpl" 
    %><%
    org.apache.log4j.Logger.getLogger(getClass()).debug(" generate ");    
%><?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd"
       default-lazy-init="true">

    <!-- Hibernate SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="annotatedClasses">
            <list>
                <!-- Mesken Beans -->
                <value>org.xmdl.mesken.model.User</value>
                <value>org.xmdl.mesken.model.Role</value>
                <!-- Application beans -->
<c:iterate select="$project/packages" var="package">
    <c:iterate select="$package/classes" var="class">
    	<c:if test="isPersisted($class)">
                <value><xc:qualifiedName element="$package"/>.model.<xc:cap element="$class"/></value>
    	</c:if>
    </c:iterate>
</c:iterate>
            </list>
        </property>
        <property name="hibernateProperties">
            <value>
                hibernate.dialect=${hibernate.dialect}
                hibernate.query.substitutions=true 'Y', false 'N'
                hibernate.cache.use_second_level_cache=true
                hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
            </value>
            <!-- Turn batching off for better error messages under PostgreSQL -->
            <!-- hibernate.jdbc.batch_size=0 -->
        </property>
    </bean>

    <!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- UniversalDao - can be used when doing standard CRUD - made available 
        for those who don't mind casting.  If you don't want to cast, look at 
        'fooDao' below. -->
    <bean id="universalDao" class="org.xmdl.ida.lib.dao.hibernate.UniversalDaoHibernate">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean id="lookupDao" class="org.xmdl.mesken.dao.hibernate.LookupDaoHibernate">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

<c:iterate select="$project/packages" var="package">
    <c:iterate select="$package/classes" var="class">
    	<c:if test="isPersisted($class)">
    <bean id="<xc:uncap element="$class"/>DAO" class="<xc:qualifiedName element="$package"/>.dao.hibernate.<xc:cap element="$class"/>DAOHibernate">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    	</c:if>
    </c:iterate>
</c:iterate>

</beans>
