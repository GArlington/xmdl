/*
* generated by Xtext
*/

package org.xmdl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class WDLGrammarAccess implements IGrammarAccess {
	
	
	public class ModelElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProjectProjectParserRuleCall_0_0 = (RuleCall)cProjectAssignment_0.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_1_0 = (RuleCall)cTypesAssignment_1.eContents().get(0);
		private final Assignment cQueriesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQueriesQueryParserRuleCall_2_0 = (RuleCall)cQueriesAssignment_2.eContents().get(0);
		
		//Model:
		//  project=Project types+=Type* queries+=Query*;
		public ParserRule getRule() { return rule; }

		//project=Project types+=Type* queries+=Query*
		public Group getGroup() { return cGroup; }

		//project=Project
		public Assignment getProjectAssignment_0() { return cProjectAssignment_0; }

		//Project
		public RuleCall getProjectProjectParserRuleCall_0_0() { return cProjectProjectParserRuleCall_0_0; }

		//types+=Type*
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_1_0() { return cTypesTypeParserRuleCall_1_0; }

		//queries+=Query*
		public Assignment getQueriesAssignment_2() { return cQueriesAssignment_2; }

		//Query
		public RuleCall getQueriesQueryParserRuleCall_2_0() { return cQueriesQueryParserRuleCall_2_0; }
	}

	public class ProjectElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Project");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cProjectNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameSTRINGTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cBasePackageKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBasePackageAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBasePackageSTRINGTerminalRuleCall_7_0 = (RuleCall)cBasePackageAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Project:
		//  "project" "{" "projectName" ":" name=STRING "basePackage" ":" basePackage=STRING "}";
		public ParserRule getRule() { return rule; }

		//"project" "{" "projectName" ":" name=STRING "basePackage" ":" basePackage=STRING "}"
		public Group getGroup() { return cGroup; }

		//"project"
		public Keyword getProjectKeyword_0() { return cProjectKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"projectName"
		public Keyword getProjectNameKeyword_2() { return cProjectNameKeyword_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//name=STRING
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_4_0() { return cNameSTRINGTerminalRuleCall_4_0; }

		//"basePackage"
		public Keyword getBasePackageKeyword_5() { return cBasePackageKeyword_5; }

		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }

		//basePackage=STRING
		public Assignment getBasePackageAssignment_7() { return cBasePackageAssignment_7; }

		//STRING
		public RuleCall getBasePackageSTRINGTerminalRuleCall_7_0() { return cBasePackageSTRINGTerminalRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class TypeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumerationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEmbedParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Type:
		//  SimpleType|Entity|Enumeration|Embed;
		public ParserRule getRule() { return rule; }

		//SimpleType|Entity|Enumeration|Embed
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleType
		public RuleCall getSimpleTypeParserRuleCall_0() { return cSimpleTypeParserRuleCall_0; }

		//Entity
		public RuleCall getEntityParserRuleCall_1() { return cEntityParserRuleCall_1; }

		//Enumeration
		public RuleCall getEnumerationParserRuleCall_2() { return cEnumerationParserRuleCall_2; }

		//Embed
		public RuleCall getEmbedParserRuleCall_3() { return cEmbedParserRuleCall_3; }
	}

	public class SimpleTypeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMappedTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMappedTypeJAVAIDParserRuleCall_2_1_0 = (RuleCall)cMappedTypeAssignment_2_1.eContents().get(0);
		
		//SimpleType:
		//  "type" name=ID ("is" mappedType=JAVAID)?;
		public ParserRule getRule() { return rule; }

		//"type" name=ID ("is" mappedType=JAVAID)?
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("is" mappedType=JAVAID)?
		public Group getGroup_2() { return cGroup_2; }

		//"is"
		public Keyword getIsKeyword_2_0() { return cIsKeyword_2_0; }

		//mappedType=JAVAID
		public Assignment getMappedTypeAssignment_2_1() { return cMappedTypeAssignment_2_1; }

		//JAVAID
		public RuleCall getMappedTypeJAVAIDParserRuleCall_2_1_0() { return cMappedTypeJAVAIDParserRuleCall_2_1_0; }
	}

	public class JAVAIDElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JAVAID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//JAVAID:
		//  name=ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//name=ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class EntityElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperEntityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperEntityEntityCrossReference_2_1_0 = (CrossReference)cSuperEntityAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperEntityEntityIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperEntityEntityCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesAttributeParserRuleCall_4_0 = (RuleCall)cAttributesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Entity:
		//  "entity" name=ID ("extends" superEntity=[Entity])? "{" attributes+=Attribute* "}";
		public ParserRule getRule() { return rule; }

		//"entity" name=ID ("extends" superEntity=[Entity])? "{" attributes+=Attribute* "}"
		public Group getGroup() { return cGroup; }

		//"entity"
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" superEntity=[Entity])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superEntity=[Entity]
		public Assignment getSuperEntityAssignment_2_1() { return cSuperEntityAssignment_2_1; }

		//[Entity]
		public CrossReference getSuperEntityEntityCrossReference_2_1_0() { return cSuperEntityEntityCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperEntityEntityIDTerminalRuleCall_2_1_0_1() { return cSuperEntityEntityIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_4_0() { return cAttributesAttributeParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class EmbedElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Embed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmbedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperEntityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperEntityEntityCrossReference_2_1_0 = (CrossReference)cSuperEntityAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperEntityEntityIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperEntityEntityCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesAttributeParserRuleCall_4_0 = (RuleCall)cAttributesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Embed:
		//  "embed" name=ID ("extends" superEntity=[Entity])? "{" attributes+=Attribute* "}";
		public ParserRule getRule() { return rule; }

		//"embed" name=ID ("extends" superEntity=[Entity])? "{" attributes+=Attribute* "}"
		public Group getGroup() { return cGroup; }

		//"embed"
		public Keyword getEmbedKeyword_0() { return cEmbedKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" superEntity=[Entity])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superEntity=[Entity]
		public Assignment getSuperEntityAssignment_2_1() { return cSuperEntityAssignment_2_1; }

		//[Entity]
		public CrossReference getSuperEntityEntityCrossReference_2_1_0() { return cSuperEntityEntityCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperEntityEntityIDTerminalRuleCall_2_1_0_1() { return cSuperEntityEntityIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_4_0() { return cAttributesAttributeParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AttributeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cManyReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cManyReferenceAttributeManyReferenceEnumRuleCall_1_0 = (RuleCall)cManyReferenceAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Attribute:
		//  type=[Type] manyReference=AttributeManyReference? name=ID;
		public ParserRule getRule() { return rule; }

		//type=[Type] manyReference=AttributeManyReference? name=ID
		public Group getGroup() { return cGroup; }

		//type=[Type]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[Type]
		public CrossReference getTypeTypeCrossReference_0_0() { return cTypeTypeCrossReference_0_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_0_0_1() { return cTypeTypeIDTerminalRuleCall_0_0_1; }

		//manyReference=AttributeManyReference?
		public Assignment getManyReferenceAssignment_1() { return cManyReferenceAssignment_1; }

		//AttributeManyReference
		public RuleCall getManyReferenceAttributeManyReferenceEnumRuleCall_1_0() { return cManyReferenceAttributeManyReferenceEnumRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class EnumerationElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLiteralsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLiteralsEnumerationLiteralParserRuleCall_3_0 = (RuleCall)cLiteralsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Enumeration:
		//  "enum" name=ID "{" literals+=EnumerationLiteral* "}";
		public ParserRule getRule() { return rule; }

		//"enum" name=ID "{" literals+=EnumerationLiteral* "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//literals+=EnumerationLiteral*
		public Assignment getLiteralsAssignment_3() { return cLiteralsAssignment_3; }

		//EnumerationLiteral
		public RuleCall getLiteralsEnumerationLiteralParserRuleCall_3_0() { return cLiteralsEnumerationLiteralParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EnumerationLiteralElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumerationLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOrdinalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOrdinalINTTerminalRuleCall_2_0 = (RuleCall)cOrdinalAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EnumerationLiteral:
		//  name=ID "(" ordinal=INT ")";
		public ParserRule getRule() { return rule; }

		//name=ID "(" ordinal=INT ")"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ordinal=INT
		public Assignment getOrdinalAssignment_2() { return cOrdinalAssignment_2; }

		//INT
		public RuleCall getOrdinalINTTerminalRuleCall_2_0() { return cOrdinalINTTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class QueryElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEntitiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEntitiesEntityCrossReference_3_0 = (CrossReference)cEntitiesAssignment_3.eContents().get(0);
		private final RuleCall cEntitiesEntityIDTerminalRuleCall_3_0_1 = (RuleCall)cEntitiesEntityCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEntitiesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cEntitiesEntityCrossReference_4_1_0 = (CrossReference)cEntitiesAssignment_4_1.eContents().get(0);
		private final RuleCall cEntitiesEntityIDTerminalRuleCall_4_1_0_1 = (RuleCall)cEntitiesEntityCrossReference_4_1_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cWithKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cParametersAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cParametersQueryParameterParserRuleCall_8_0 = (RuleCall)cParametersAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cParametersAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cParametersQueryParameterParserRuleCall_9_1_0 = (RuleCall)cParametersAssignment_9_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cFiltersAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cFiltersQueryFilterParserRuleCall_12_0 = (RuleCall)cFiltersAssignment_12.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cMaxKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Assignment cMaxAssignment_13_2 = (Assignment)cGroup_13.eContents().get(2);
		private final RuleCall cMaxINTTerminalRuleCall_13_2_0 = (RuleCall)cMaxAssignment_13_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13_3 = (Keyword)cGroup_13.eContents().get(3);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cOffsetKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Assignment cOffsetAssignment_14_2 = (Assignment)cGroup_14.eContents().get(2);
		private final RuleCall cOffsetINTTerminalRuleCall_14_2_0 = (RuleCall)cOffsetAssignment_14_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_14_3 = (Keyword)cGroup_14.eContents().get(3);
		private final Group cGroup_15 = (Group)cGroup.eContents().get(15);
		private final Keyword cOrderKeyword_15_0 = (Keyword)cGroup_15.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Assignment cOrdersAssignment_15_2 = (Assignment)cGroup_15.eContents().get(2);
		private final RuleCall cOrdersQueryOrderParserRuleCall_15_2_0 = (RuleCall)cOrdersAssignment_15_2.eContents().get(0);
		private final Group cGroup_15_3 = (Group)cGroup_15.eContents().get(3);
		private final Keyword cCommaKeyword_15_3_0 = (Keyword)cGroup_15_3.eContents().get(0);
		private final Assignment cOrdersAssignment_15_3_1 = (Assignment)cGroup_15_3.eContents().get(1);
		private final RuleCall cOrdersQueryOrderParserRuleCall_15_3_1_0 = (RuleCall)cOrdersAssignment_15_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_15_4 = (Keyword)cGroup_15.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//Query:
		//  "query" name=ID "<" entities+=[Entity] ("," entities+=[Entity])* ">" "with" "("
		//  parameters+=QueryParameter? ("," parameters+=QueryParameter)* ")" "{" filters+=
		//  QueryFilter* ("-max" "(" max=INT ")")? ("-offset" "(" offset=INT ")")? ("-order" "(" orders
		//  +=QueryOrder? ("," orders+=QueryOrder)* ")")? "}";
		public ParserRule getRule() { return rule; }

		//"query" name=ID "<" entities+=[Entity] ("," entities+=[Entity])* ">" "with" "("
		//parameters+=QueryParameter? ("," parameters+=QueryParameter)* ")" "{" filters+=
		//QueryFilter* ("-max" "(" max=INT ")")? ("-offset" "(" offset=INT ")")? ("-order" "(" orders
		//+=QueryOrder? ("," orders+=QueryOrder)* ")")? "}"
		public Group getGroup() { return cGroup; }

		//"query"
		public Keyword getQueryKeyword_0() { return cQueryKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }

		//entities+=[Entity]
		public Assignment getEntitiesAssignment_3() { return cEntitiesAssignment_3; }

		//[Entity]
		public CrossReference getEntitiesEntityCrossReference_3_0() { return cEntitiesEntityCrossReference_3_0; }

		//ID
		public RuleCall getEntitiesEntityIDTerminalRuleCall_3_0_1() { return cEntitiesEntityIDTerminalRuleCall_3_0_1; }

		//("," entities+=[Entity])*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//entities+=[Entity]
		public Assignment getEntitiesAssignment_4_1() { return cEntitiesAssignment_4_1; }

		//[Entity]
		public CrossReference getEntitiesEntityCrossReference_4_1_0() { return cEntitiesEntityCrossReference_4_1_0; }

		//ID
		public RuleCall getEntitiesEntityIDTerminalRuleCall_4_1_0_1() { return cEntitiesEntityIDTerminalRuleCall_4_1_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_5() { return cGreaterThanSignKeyword_5; }

		//"with"
		public Keyword getWithKeyword_6() { return cWithKeyword_6; }

		//"("
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }

		//parameters+=QueryParameter?
		public Assignment getParametersAssignment_8() { return cParametersAssignment_8; }

		//QueryParameter
		public RuleCall getParametersQueryParameterParserRuleCall_8_0() { return cParametersQueryParameterParserRuleCall_8_0; }

		//("," parameters+=QueryParameter)*
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//parameters+=QueryParameter
		public Assignment getParametersAssignment_9_1() { return cParametersAssignment_9_1; }

		//QueryParameter
		public RuleCall getParametersQueryParameterParserRuleCall_9_1_0() { return cParametersQueryParameterParserRuleCall_9_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }

		//filters+=QueryFilter*
		public Assignment getFiltersAssignment_12() { return cFiltersAssignment_12; }

		//QueryFilter
		public RuleCall getFiltersQueryFilterParserRuleCall_12_0() { return cFiltersQueryFilterParserRuleCall_12_0; }

		//("-max" "(" max=INT ")")?
		public Group getGroup_13() { return cGroup_13; }

		//"-max"
		public Keyword getMaxKeyword_13_0() { return cMaxKeyword_13_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_13_1() { return cLeftParenthesisKeyword_13_1; }

		//max=INT
		public Assignment getMaxAssignment_13_2() { return cMaxAssignment_13_2; }

		//INT
		public RuleCall getMaxINTTerminalRuleCall_13_2_0() { return cMaxINTTerminalRuleCall_13_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_13_3() { return cRightParenthesisKeyword_13_3; }

		//("-offset" "(" offset=INT ")")?
		public Group getGroup_14() { return cGroup_14; }

		//"-offset"
		public Keyword getOffsetKeyword_14_0() { return cOffsetKeyword_14_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_14_1() { return cLeftParenthesisKeyword_14_1; }

		//offset=INT
		public Assignment getOffsetAssignment_14_2() { return cOffsetAssignment_14_2; }

		//INT
		public RuleCall getOffsetINTTerminalRuleCall_14_2_0() { return cOffsetINTTerminalRuleCall_14_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_14_3() { return cRightParenthesisKeyword_14_3; }

		//("-order" "(" orders+=QueryOrder? ("," orders+=QueryOrder)* ")")?
		public Group getGroup_15() { return cGroup_15; }

		//"-order"
		public Keyword getOrderKeyword_15_0() { return cOrderKeyword_15_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_15_1() { return cLeftParenthesisKeyword_15_1; }

		//orders+=QueryOrder?
		public Assignment getOrdersAssignment_15_2() { return cOrdersAssignment_15_2; }

		//QueryOrder
		public RuleCall getOrdersQueryOrderParserRuleCall_15_2_0() { return cOrdersQueryOrderParserRuleCall_15_2_0; }

		//("," orders+=QueryOrder)*
		public Group getGroup_15_3() { return cGroup_15_3; }

		//","
		public Keyword getCommaKeyword_15_3_0() { return cCommaKeyword_15_3_0; }

		//orders+=QueryOrder
		public Assignment getOrdersAssignment_15_3_1() { return cOrdersAssignment_15_3_1; }

		//QueryOrder
		public RuleCall getOrdersQueryOrderParserRuleCall_15_3_1_0() { return cOrdersQueryOrderParserRuleCall_15_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_15_4() { return cRightParenthesisKeyword_15_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }
	}

	public class QueryParameterElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QueryParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//QueryParameter:
		//  type=[Type] name=ID;
		public ParserRule getRule() { return rule; }

		//type=[Type] name=ID
		public Group getGroup() { return cGroup; }

		//type=[Type]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[Type]
		public CrossReference getTypeTypeCrossReference_0_0() { return cTypeTypeCrossReference_0_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_0_0_1() { return cTypeTypeIDTerminalRuleCall_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class QueryFilterElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QueryFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEntityEntityCrossReference_0_0 = (CrossReference)cEntityAssignment_0.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_0_0_1 = (RuleCall)cEntityEntityCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttributeAttributeCrossReference_2_0 = (CrossReference)cAttributeAssignment_2.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cAttributeAttributeCrossReference_2_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cValueQueryParameterCrossReference_4_0 = (CrossReference)cValueAssignment_4.eContents().get(0);
		private final RuleCall cValueQueryParameterIDTerminalRuleCall_4_0_1 = (RuleCall)cValueQueryParameterCrossReference_4_0.eContents().get(1);
		
		//QueryFilter:
		//  entity=[Entity]? "." attribute=[Attribute] "=" value=[QueryParameter];
		public ParserRule getRule() { return rule; }

		//entity=[Entity]? "." attribute=[Attribute] "=" value=[QueryParameter]
		public Group getGroup() { return cGroup; }

		//entity=[Entity]?
		public Assignment getEntityAssignment_0() { return cEntityAssignment_0; }

		//[Entity]
		public CrossReference getEntityEntityCrossReference_0_0() { return cEntityEntityCrossReference_0_0; }

		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_0_0_1() { return cEntityEntityIDTerminalRuleCall_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//attribute=[Attribute]
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }

		//[Attribute]
		public CrossReference getAttributeAttributeCrossReference_2_0() { return cAttributeAttributeCrossReference_2_0; }

		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_2_0_1() { return cAttributeAttributeIDTerminalRuleCall_2_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//value=[QueryParameter]
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//[QueryParameter]
		public CrossReference getValueQueryParameterCrossReference_4_0() { return cValueQueryParameterCrossReference_4_0; }

		//ID
		public RuleCall getValueQueryParameterIDTerminalRuleCall_4_0_1() { return cValueQueryParameterIDTerminalRuleCall_4_0_1; }
	}

	public class QueryOrderElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QueryOrder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEntityEntityCrossReference_0_0 = (CrossReference)cEntityAssignment_0.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_0_0_1 = (RuleCall)cEntityEntityCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttributeAttributeCrossReference_2_0 = (CrossReference)cAttributeAssignment_2.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cAttributeAttributeCrossReference_2_0.eContents().get(1);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeQueryOrderTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//QueryOrder:
		//  entity=[Entity]? "." attribute=[Attribute] type=QueryOrderType?;
		public ParserRule getRule() { return rule; }

		//entity=[Entity]? "." attribute=[Attribute] type=QueryOrderType?
		public Group getGroup() { return cGroup; }

		//entity=[Entity]?
		public Assignment getEntityAssignment_0() { return cEntityAssignment_0; }

		//[Entity]
		public CrossReference getEntityEntityCrossReference_0_0() { return cEntityEntityCrossReference_0_0; }

		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_0_0_1() { return cEntityEntityIDTerminalRuleCall_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//attribute=[Attribute]
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }

		//[Attribute]
		public CrossReference getAttributeAttributeCrossReference_2_0() { return cAttributeAttributeCrossReference_2_0; }

		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_2_0_1() { return cAttributeAttributeIDTerminalRuleCall_2_0_1; }

		//type=QueryOrderType?
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//QueryOrderType
		public RuleCall getTypeQueryOrderTypeEnumRuleCall_3_0() { return cTypeQueryOrderTypeEnumRuleCall_3_0; }
	}
	
	
	public class AttributeManyReferenceElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeManyReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNONENONEKeyword_0_0 = (Keyword)cNONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWEAKEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWEAKAsteriskKeyword_1_0 = (Keyword)cWEAKEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSTRONGEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSTRONGNumberSignKeyword_2_0 = (Keyword)cSTRONGEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AttributeManyReference:
		//  NONE | WEAK="*" | STRONG="#";
		public EnumRule getRule() { return rule; }

		//NONE | WEAK="*" | STRONG="#"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NONE
		public EnumLiteralDeclaration getNONEEnumLiteralDeclaration_0() { return cNONEEnumLiteralDeclaration_0; }

		//"NONE"
		public Keyword getNONENONEKeyword_0_0() { return cNONENONEKeyword_0_0; }

		//WEAK="*"
		public EnumLiteralDeclaration getWEAKEnumLiteralDeclaration_1() { return cWEAKEnumLiteralDeclaration_1; }

		//"*"
		public Keyword getWEAKAsteriskKeyword_1_0() { return cWEAKAsteriskKeyword_1_0; }

		//STRONG="#"
		public EnumLiteralDeclaration getSTRONGEnumLiteralDeclaration_2() { return cSTRONGEnumLiteralDeclaration_2; }

		//"#"
		public Keyword getSTRONGNumberSignKeyword_2_0() { return cSTRONGNumberSignKeyword_2_0; }
	}

	public class QueryOrderTypeElements implements IEnumRuleAccess {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "QueryOrderType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cASCEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cASCPlusSignKeyword_0_0 = (Keyword)cASCEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDESCEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDESCHyphenMinusKeyword_1_0 = (Keyword)cDESCEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum QueryOrderType:
		//  ASC="+" | DESC="-";
		public EnumRule getRule() { return rule; }

		//ASC="+" | DESC="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ASC="+"
		public EnumLiteralDeclaration getASCEnumLiteralDeclaration_0() { return cASCEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getASCPlusSignKeyword_0_0() { return cASCPlusSignKeyword_0_0; }

		//DESC="-"
		public EnumLiteralDeclaration getDESCEnumLiteralDeclaration_1() { return cDESCEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getDESCHyphenMinusKeyword_1_0() { return cDESCHyphenMinusKeyword_1_0; }
	}
	
	private ModelElements pModel;
	private ProjectElements pProject;
	private TypeElements pType;
	private SimpleTypeElements pSimpleType;
	private JAVAIDElements pJAVAID;
	private EntityElements pEntity;
	private EmbedElements pEmbed;
	private AttributeElements pAttribute;
	private AttributeManyReferenceElements unknownRuleAttributeManyReference;
	private EnumerationElements pEnumeration;
	private EnumerationLiteralElements pEnumerationLiteral;
	private QueryElements pQuery;
	private QueryParameterElements pQueryParameter;
	private QueryFilterElements pQueryFilter;
	private QueryOrderElements pQueryOrder;
	private QueryOrderTypeElements unknownRuleQueryOrderType;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public WDLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//  project=Project types+=Type* queries+=Query*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Project:
	//  "project" "{" "projectName" ":" name=STRING "basePackage" ":" basePackage=STRING "}";
	public ProjectElements getProjectAccess() {
		return (pProject != null) ? pProject : (pProject = new ProjectElements());
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}

	//Type:
	//  SimpleType|Entity|Enumeration|Embed;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//SimpleType:
	//  "type" name=ID ("is" mappedType=JAVAID)?;
	public SimpleTypeElements getSimpleTypeAccess() {
		return (pSimpleType != null) ? pSimpleType : (pSimpleType = new SimpleTypeElements());
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}

	//JAVAID:
	//  name=ID ("." ID)*;
	public JAVAIDElements getJAVAIDAccess() {
		return (pJAVAID != null) ? pJAVAID : (pJAVAID = new JAVAIDElements());
	}
	
	public ParserRule getJAVAIDRule() {
		return getJAVAIDAccess().getRule();
	}

	//Entity:
	//  "entity" name=ID ("extends" superEntity=[Entity])? "{" attributes+=Attribute* "}";
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Embed:
	//  "embed" name=ID ("extends" superEntity=[Entity])? "{" attributes+=Attribute* "}";
	public EmbedElements getEmbedAccess() {
		return (pEmbed != null) ? pEmbed : (pEmbed = new EmbedElements());
	}
	
	public ParserRule getEmbedRule() {
		return getEmbedAccess().getRule();
	}

	//Attribute:
	//  type=[Type] manyReference=AttributeManyReference? name=ID;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//enum AttributeManyReference:
	//  NONE | WEAK="*" | STRONG="#";
	public AttributeManyReferenceElements getAttributeManyReferenceAccess() {
		return (unknownRuleAttributeManyReference != null) ? unknownRuleAttributeManyReference : (unknownRuleAttributeManyReference = new AttributeManyReferenceElements());
	}
	
	public EnumRule getAttributeManyReferenceRule() {
		return getAttributeManyReferenceAccess().getRule();
	}

	//Enumeration:
	//  "enum" name=ID "{" literals+=EnumerationLiteral* "}";
	public EnumerationElements getEnumerationAccess() {
		return (pEnumeration != null) ? pEnumeration : (pEnumeration = new EnumerationElements());
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}

	//EnumerationLiteral:
	//  name=ID "(" ordinal=INT ")";
	public EnumerationLiteralElements getEnumerationLiteralAccess() {
		return (pEnumerationLiteral != null) ? pEnumerationLiteral : (pEnumerationLiteral = new EnumerationLiteralElements());
	}
	
	public ParserRule getEnumerationLiteralRule() {
		return getEnumerationLiteralAccess().getRule();
	}

	//Query:
	//  "query" name=ID "<" entities+=[Entity] ("," entities+=[Entity])* ">" "with" "("
	//  parameters+=QueryParameter? ("," parameters+=QueryParameter)* ")" "{" filters+=
	//  QueryFilter* ("-max" "(" max=INT ")")? ("-offset" "(" offset=INT ")")? ("-order" "(" orders
	//  +=QueryOrder? ("," orders+=QueryOrder)* ")")? "}";
	public QueryElements getQueryAccess() {
		return (pQuery != null) ? pQuery : (pQuery = new QueryElements());
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}

	//QueryParameter:
	//  type=[Type] name=ID;
	public QueryParameterElements getQueryParameterAccess() {
		return (pQueryParameter != null) ? pQueryParameter : (pQueryParameter = new QueryParameterElements());
	}
	
	public ParserRule getQueryParameterRule() {
		return getQueryParameterAccess().getRule();
	}

	//QueryFilter:
	//  entity=[Entity]? "." attribute=[Attribute] "=" value=[QueryParameter];
	public QueryFilterElements getQueryFilterAccess() {
		return (pQueryFilter != null) ? pQueryFilter : (pQueryFilter = new QueryFilterElements());
	}
	
	public ParserRule getQueryFilterRule() {
		return getQueryFilterAccess().getRule();
	}

	//QueryOrder:
	//  entity=[Entity]? "." attribute=[Attribute] type=QueryOrderType?;
	public QueryOrderElements getQueryOrderAccess() {
		return (pQueryOrder != null) ? pQueryOrder : (pQueryOrder = new QueryOrderElements());
	}
	
	public ParserRule getQueryOrderRule() {
		return getQueryOrderAccess().getRule();
	}

	//enum QueryOrderType:
	//  ASC="+" | DESC="-";
	public QueryOrderTypeElements getQueryOrderTypeAccess() {
		return (unknownRuleQueryOrderType != null) ? unknownRuleQueryOrderType : (unknownRuleQueryOrderType = new QueryOrderTypeElements());
	}
	
	public EnumRule getQueryOrderTypeRule() {
		return getQueryOrderTypeAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
