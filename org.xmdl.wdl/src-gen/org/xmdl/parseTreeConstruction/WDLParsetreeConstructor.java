/*
* generated by Xtext
*/
package org.xmdl.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.xmdl.services.WDLGrammarAccess;

import com.google.inject.Inject;

public class WDLParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private WDLGrammarAccess grammarAccess;
		
	public WDLGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_Group(this, this, 0, inst);
			case 1: return new Project_Group(this, this, 1, inst);
			case 2: return new Type_Alternatives(this, this, 2, inst);
			case 3: return new SimpleType_Group(this, this, 3, inst);
			case 4: return new JAVAID_Group(this, this, 4, inst);
			case 5: return new Entity_Group(this, this, 5, inst);
			case 6: return new Embed_Group(this, this, 6, inst);
			case 7: return new Attribute_Group(this, this, 7, inst);
			case 8: return new Enumeration_Group(this, this, 8, inst);
			case 9: return new EnumerationLiteral_Group(this, this, 9, inst);
			case 10: return new Query_Group(this, this, 10, inst);
			case 11: return new QueryParameter_Group(this, this, 11, inst);
			case 12: return new QueryFilter_Group(this, this, 12, inst);
			case 13: return new QueryOrder_Group(this, this, 13, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 *   project=Project types+=Type* queries+=Query*;
 *
 **/

// project=Project types+=Type* queries+=Query*
protected class Model_Group extends GroupToken {
	
	public Model_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getModelAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Model_QueriesAssignment_2(parent, this, 0, inst);
			case 1: return new Model_TypesAssignment_1(parent, this, 1, inst);
			case 2: return new Model_ProjectAssignment_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// project=Project
protected class Model_ProjectAssignment_0 extends AssignmentToken  {
	
	public Model_ProjectAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getProjectAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Project_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("project",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("project");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProjectRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getProjectProjectParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// types+=Type*
protected class Model_TypesAssignment_1 extends AssignmentToken  {
	
	public Model_TypesAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getTypesAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("types",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("types");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getTypesTypeParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_TypesAssignment_1(parent, next, actIndex, consumed);
			case 1: return new Model_ProjectAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// queries+=Query*
protected class Model_QueriesAssignment_2 extends AssignmentToken  {
	
	public Model_QueriesAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getQueriesAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("queries",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("queries");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQueryRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getModelAccess().getQueriesQueryParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Model_QueriesAssignment_2(parent, next, actIndex, consumed);
			case 1: return new Model_TypesAssignment_1(parent, next, actIndex, consumed);
			case 2: return new Model_ProjectAssignment_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Model ****************/


/************ begin Rule Project ****************
 *
 * Project:
 *   "project" "{" "projectName" ":" name=STRING "basePackage" ":" basePackage=STRING "}";
 *
 **/

// "project" "{" "projectName" ":" name=STRING "basePackage" ":" basePackage=STRING "}"
protected class Project_Group extends GroupToken {
	
	public Project_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getProjectAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Project_RightCurlyBracketKeyword_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getProjectRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "project"
protected class Project_ProjectKeyword_0 extends KeywordToken  {
	
	public Project_ProjectKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProjectAccess().getProjectKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// "{"
protected class Project_LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public Project_LeftCurlyBracketKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProjectAccess().getLeftCurlyBracketKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Project_ProjectKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "projectName"
protected class Project_ProjectNameKeyword_2 extends KeywordToken  {
	
	public Project_ProjectNameKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProjectAccess().getProjectNameKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Project_LeftCurlyBracketKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ":"
protected class Project_ColonKeyword_3 extends KeywordToken  {
	
	public Project_ColonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProjectAccess().getColonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Project_ProjectNameKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=STRING
protected class Project_NameAssignment_4 extends AssignmentToken  {
	
	public Project_NameAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProjectAccess().getNameAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Project_ColonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getProjectAccess().getNameSTRINGTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// "basePackage"
protected class Project_BasePackageKeyword_5 extends KeywordToken  {
	
	public Project_BasePackageKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProjectAccess().getBasePackageKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Project_NameAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ":"
protected class Project_ColonKeyword_6 extends KeywordToken  {
	
	public Project_ColonKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProjectAccess().getColonKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Project_BasePackageKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// basePackage=STRING
protected class Project_BasePackageAssignment_7 extends AssignmentToken  {
	
	public Project_BasePackageAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getProjectAccess().getBasePackageAssignment_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Project_ColonKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("basePackage",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("basePackage");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getProjectAccess().getBasePackageSTRINGTerminalRuleCall_7_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class Project_RightCurlyBracketKeyword_8 extends KeywordToken  {
	
	public Project_RightCurlyBracketKeyword_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getProjectAccess().getRightCurlyBracketKeyword_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Project_BasePackageAssignment_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Project ****************/


/************ begin Rule Type ****************
 *
 * Type:
 *   SimpleType|Entity|Enumeration|Embed;
 *
 **/

// SimpleType|Entity|Enumeration|Embed
protected class Type_Alternatives extends AlternativesToken {

	public Type_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getTypeAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_SimpleTypeParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Type_EntityParserRuleCall_1(parent, this, 1, inst);
			case 2: return new Type_EnumerationParserRuleCall_2(parent, this, 2, inst);
			case 3: return new Type_EmbedParserRuleCall_3(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// SimpleType
protected class Type_SimpleTypeParserRuleCall_0 extends RuleCallToken {
	
	public Type_SimpleTypeParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getSimpleTypeParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleType_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SimpleType_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSimpleTypeRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Entity
protected class Type_EntityParserRuleCall_1 extends RuleCallToken {
	
	public Type_EntityParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getEntityParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Entity_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Entity_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getEntityRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Enumeration
protected class Type_EnumerationParserRuleCall_2 extends RuleCallToken {
	
	public Type_EnumerationParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getEnumerationParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Enumeration_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getEnumerationRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Embed
protected class Type_EmbedParserRuleCall_3 extends RuleCallToken {
	
	public Type_EmbedParserRuleCall_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTypeAccess().getEmbedParserRuleCall_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Embed_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Embed_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getEmbedRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Type ****************/


/************ begin Rule SimpleType ****************
 *
 * SimpleType:
 *   "type" name=ID ("is" mappedType=JAVAID)?;
 *
 **/

// "type" name=ID ("is" mappedType=JAVAID)?
protected class SimpleType_Group extends GroupToken {
	
	public SimpleType_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSimpleTypeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleType_Group_2(parent, this, 0, inst);
			case 1: return new SimpleType_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSimpleTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "type"
protected class SimpleType_TypeKeyword_0 extends KeywordToken  {
	
	public SimpleType_TypeKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleTypeAccess().getTypeKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class SimpleType_NameAssignment_1 extends AssignmentToken  {
	
	public SimpleType_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleTypeAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleType_TypeKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSimpleTypeAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("is" mappedType=JAVAID)?
protected class SimpleType_Group_2 extends GroupToken {
	
	public SimpleType_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSimpleTypeAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleType_MappedTypeAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "is"
protected class SimpleType_IsKeyword_2_0 extends KeywordToken  {
	
	public SimpleType_IsKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleTypeAccess().getIsKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SimpleType_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// mappedType=JAVAID
protected class SimpleType_MappedTypeAssignment_2_1 extends AssignmentToken  {
	
	public SimpleType_MappedTypeAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleTypeAccess().getMappedTypeAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new JAVAID_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("mappedType",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("mappedType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getJAVAIDRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getSimpleTypeAccess().getMappedTypeJAVAIDParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SimpleType_IsKeyword_2_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule SimpleType ****************/


/************ begin Rule JAVAID ****************
 *
 * JAVAID:
 *   name=ID ("." ID)*;
 *
 **/

// name=ID ("." ID)*
protected class JAVAID_Group extends GroupToken {
	
	public JAVAID_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getJAVAIDAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new JAVAID_Group_1(parent, this, 0, inst);
			case 1: return new JAVAID_NameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getJAVAIDRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class JAVAID_NameAssignment_0 extends AssignmentToken  {
	
	public JAVAID_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getJAVAIDAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getJAVAIDAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ("." ID)*
protected class JAVAID_Group_1 extends GroupToken {
	
	public JAVAID_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getJAVAIDAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new JAVAID_IDTerminalRuleCall_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "."
protected class JAVAID_FullStopKeyword_1_0 extends KeywordToken  {
	
	public JAVAID_FullStopKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getJAVAIDAccess().getFullStopKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new JAVAID_Group_1(parent, this, 0, inst);
			case 1: return new JAVAID_NameAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ID
protected class JAVAID_IDTerminalRuleCall_1_1 extends UnassignedTextToken {

	public JAVAID_IDTerminalRuleCall_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getJAVAIDAccess().getIDTerminalRuleCall_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new JAVAID_FullStopKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}



/************ end Rule JAVAID ****************/


/************ begin Rule Entity ****************
 *
 * Entity:
 *   "entity" name=ID ("extends" superEntity=[Entity])? "{" attributes+=Attribute* "}";
 *
 **/

// "entity" name=ID ("extends" superEntity=[Entity])? "{" attributes+=Attribute* "}"
protected class Entity_Group extends GroupToken {
	
	public Entity_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEntityAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Entity_RightCurlyBracketKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEntityRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "entity"
protected class Entity_EntityKeyword_0 extends KeywordToken  {
	
	public Entity_EntityKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEntityAccess().getEntityKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Entity_NameAssignment_1 extends AssignmentToken  {
	
	public Entity_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEntityAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Entity_EntityKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getEntityAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("extends" superEntity=[Entity])?
protected class Entity_Group_2 extends GroupToken {
	
	public Entity_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEntityAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Entity_SuperEntityAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "extends"
protected class Entity_ExtendsKeyword_2_0 extends KeywordToken  {
	
	public Entity_ExtendsKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEntityAccess().getExtendsKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Entity_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// superEntity=[Entity]
protected class Entity_SuperEntityAssignment_2_1 extends AssignmentToken  {
	
	public Entity_SuperEntityAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEntityAccess().getSuperEntityAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Entity_ExtendsKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("superEntity",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("superEntity");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEntityAccess().getSuperEntityEntityCrossReference_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getEntityAccess().getSuperEntityEntityCrossReference_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "{"
protected class Entity_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public Entity_LeftCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEntityAccess().getLeftCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Entity_Group_2(parent, this, 0, inst);
			case 1: return new Entity_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// attributes+=Attribute*
protected class Entity_AttributesAssignment_4 extends AssignmentToken  {
	
	public Entity_AttributesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEntityAccess().getAttributesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("attributes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("attributes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttributeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEntityAccess().getAttributesAttributeParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Entity_AttributesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new Entity_LeftCurlyBracketKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Entity_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public Entity_RightCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEntityAccess().getRightCurlyBracketKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Entity_AttributesAssignment_4(parent, this, 0, inst);
			case 1: return new Entity_LeftCurlyBracketKeyword_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Entity ****************/


/************ begin Rule Embed ****************
 *
 * Embed:
 *   "embed" name=ID ("extends" superEntity=[Entity])? "{" attributes+=Attribute* "}";
 *
 **/

// "embed" name=ID ("extends" superEntity=[Entity])? "{" attributes+=Attribute* "}"
protected class Embed_Group extends GroupToken {
	
	public Embed_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEmbedAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Embed_RightCurlyBracketKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEmbedRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "embed"
protected class Embed_EmbedKeyword_0 extends KeywordToken  {
	
	public Embed_EmbedKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEmbedAccess().getEmbedKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Embed_NameAssignment_1 extends AssignmentToken  {
	
	public Embed_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEmbedAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Embed_EmbedKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getEmbedAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ("extends" superEntity=[Entity])?
protected class Embed_Group_2 extends GroupToken {
	
	public Embed_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEmbedAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Embed_SuperEntityAssignment_2_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "extends"
protected class Embed_ExtendsKeyword_2_0 extends KeywordToken  {
	
	public Embed_ExtendsKeyword_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEmbedAccess().getExtendsKeyword_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Embed_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// superEntity=[Entity]
protected class Embed_SuperEntityAssignment_2_1 extends AssignmentToken  {
	
	public Embed_SuperEntityAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEmbedAccess().getSuperEntityAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Embed_ExtendsKeyword_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("superEntity",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("superEntity");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEmbedAccess().getSuperEntityEntityCrossReference_2_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getEmbedAccess().getSuperEntityEntityCrossReference_2_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "{"
protected class Embed_LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public Embed_LeftCurlyBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEmbedAccess().getLeftCurlyBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Embed_Group_2(parent, this, 0, inst);
			case 1: return new Embed_NameAssignment_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// attributes+=Attribute*
protected class Embed_AttributesAssignment_4 extends AssignmentToken  {
	
	public Embed_AttributesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEmbedAccess().getAttributesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("attributes",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("attributes");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttributeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEmbedAccess().getAttributesAttributeParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Embed_AttributesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new Embed_LeftCurlyBracketKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Embed_RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public Embed_RightCurlyBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEmbedAccess().getRightCurlyBracketKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Embed_AttributesAssignment_4(parent, this, 0, inst);
			case 1: return new Embed_LeftCurlyBracketKeyword_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Embed ****************/


/************ begin Rule Attribute ****************
 *
 * Attribute:
 *   type=[Type] manyReference=AttributeManyReference? name=ID;
 *
 **/

// type=[Type] manyReference=AttributeManyReference? name=ID
protected class Attribute_Group extends GroupToken {
	
	public Attribute_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAttributeAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAttributeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// type=[Type]
protected class Attribute_TypeAssignment_0 extends AssignmentToken  {
	
	public Attribute_TypeAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getTypeAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttributeAccess().getTypeTypeCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAttributeAccess().getTypeTypeCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// manyReference=AttributeManyReference?
protected class Attribute_ManyReferenceAssignment_1 extends AssignmentToken  {
	
	public Attribute_ManyReferenceAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getManyReferenceAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_TypeAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("manyReference",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("manyReference");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getAttributeAccess().getManyReferenceAttributeManyReferenceEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class Attribute_NameAssignment_2 extends AssignmentToken  {
	
	public Attribute_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAttributeAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Attribute_ManyReferenceAssignment_1(parent, this, 0, inst);
			case 1: return new Attribute_TypeAssignment_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Attribute ****************/


/************ begin Rule Enumeration ****************
 *
 * Enumeration:
 *   "enum" name=ID "{" literals+=EnumerationLiteral* "}";
 *
 **/

// "enum" name=ID "{" literals+=EnumerationLiteral* "}"
protected class Enumeration_Group extends GroupToken {
	
	public Enumeration_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_RightCurlyBracketKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEnumerationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "enum"
protected class Enumeration_EnumKeyword_0 extends KeywordToken  {
	
	public Enumeration_EnumKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getEnumKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Enumeration_NameAssignment_1 extends AssignmentToken  {
	
	public Enumeration_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_EnumKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getEnumerationAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class Enumeration_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public Enumeration_LeftCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getLeftCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// literals+=EnumerationLiteral*
protected class Enumeration_LiteralsAssignment_3 extends AssignmentToken  {
	
	public Enumeration_LiteralsAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getLiteralsAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("literals",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("literals");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEnumerationLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEnumerationAccess().getLiteralsEnumerationLiteralParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Enumeration_LiteralsAssignment_3(parent, next, actIndex, consumed);
			case 1: return new Enumeration_LeftCurlyBracketKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Enumeration_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public Enumeration_RightCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getRightCurlyBracketKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_LiteralsAssignment_3(parent, this, 0, inst);
			case 1: return new Enumeration_LeftCurlyBracketKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Enumeration ****************/


/************ begin Rule EnumerationLiteral ****************
 *
 * EnumerationLiteral:
 *   name=ID "(" ordinal=INT ")";
 *
 **/

// name=ID "(" ordinal=INT ")"
protected class EnumerationLiteral_Group extends GroupToken {
	
	public EnumerationLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEnumerationLiteralAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationLiteral_RightParenthesisKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEnumerationLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class EnumerationLiteral_NameAssignment_0 extends AssignmentToken  {
	
	public EnumerationLiteral_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationLiteralAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getEnumerationLiteralAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class EnumerationLiteral_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public EnumerationLiteral_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationLiteralAccess().getLeftParenthesisKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationLiteral_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ordinal=INT
protected class EnumerationLiteral_OrdinalAssignment_2 extends AssignmentToken  {
	
	public EnumerationLiteral_OrdinalAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationLiteralAccess().getOrdinalAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationLiteral_LeftParenthesisKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("ordinal",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ordinal");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getEnumerationLiteralAccess().getOrdinalINTTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ")"
protected class EnumerationLiteral_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public EnumerationLiteral_RightParenthesisKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationLiteralAccess().getRightParenthesisKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationLiteral_OrdinalAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule EnumerationLiteral ****************/


/************ begin Rule Query ****************
 *
 * Query:
 *   "query" name=ID "<" entities+=[Entity] ("," entities+=[Entity])* ">" "with" "("
 *   parameters+=QueryParameter? ("," parameters+=QueryParameter)* ")" "{" filters+=
 *   QueryFilter* ("-max" "(" max=INT ")")? ("-offset" "(" offset=INT ")")? ("-order" "(" orders
 *   +=QueryOrder? ("," orders+=QueryOrder)* ")")? "}";
 *
 **/

// "query" name=ID "<" entities+=[Entity] ("," entities+=[Entity])* ">" "with" "("
// parameters+=QueryParameter? ("," parameters+=QueryParameter)* ")" "{" filters+=
// QueryFilter* ("-max" "(" max=INT ")")? ("-offset" "(" offset=INT ")")? ("-order" "(" orders
// +=QueryOrder? ("," orders+=QueryOrder)* ")")? "}"
protected class Query_Group extends GroupToken {
	
	public Query_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getQueryAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_RightCurlyBracketKeyword_16(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getQueryRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "query"
protected class Query_QueryKeyword_0 extends KeywordToken  {
	
	public Query_QueryKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getQueryKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class Query_NameAssignment_1 extends AssignmentToken  {
	
	public Query_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_QueryKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getQueryAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "<"
protected class Query_LessThanSignKeyword_2 extends KeywordToken  {
	
	public Query_LessThanSignKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getLessThanSignKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// entities+=[Entity]
protected class Query_EntitiesAssignment_3 extends AssignmentToken  {
	
	public Query_EntitiesAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryAccess().getEntitiesAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_LessThanSignKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("entities",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("entities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQueryAccess().getEntitiesEntityCrossReference_3_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getQueryAccess().getEntitiesEntityCrossReference_3_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("," entities+=[Entity])*
protected class Query_Group_4 extends GroupToken {
	
	public Query_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getQueryAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_EntitiesAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Query_CommaKeyword_4_0 extends KeywordToken  {
	
	public Query_CommaKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getCommaKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_Group_4(parent, this, 0, inst);
			case 1: return new Query_EntitiesAssignment_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// entities+=[Entity]
protected class Query_EntitiesAssignment_4_1 extends AssignmentToken  {
	
	public Query_EntitiesAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryAccess().getEntitiesAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_CommaKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("entities",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("entities");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQueryAccess().getEntitiesEntityCrossReference_4_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getQueryAccess().getEntitiesEntityCrossReference_4_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// ">"
protected class Query_GreaterThanSignKeyword_5 extends KeywordToken  {
	
	public Query_GreaterThanSignKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getGreaterThanSignKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_Group_4(parent, this, 0, inst);
			case 1: return new Query_EntitiesAssignment_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "with"
protected class Query_WithKeyword_6 extends KeywordToken  {
	
	public Query_WithKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getWithKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_GreaterThanSignKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class Query_LeftParenthesisKeyword_7 extends KeywordToken  {
	
	public Query_LeftParenthesisKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getLeftParenthesisKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_WithKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// parameters+=QueryParameter?
protected class Query_ParametersAssignment_8 extends AssignmentToken  {
	
	public Query_ParametersAssignment_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryAccess().getParametersAssignment_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryParameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQueryParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getQueryAccess().getParametersQueryParameterParserRuleCall_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Query_LeftParenthesisKeyword_7(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," parameters+=QueryParameter)*
protected class Query_Group_9 extends GroupToken {
	
	public Query_Group_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getQueryAccess().getGroup_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_ParametersAssignment_9_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Query_CommaKeyword_9_0 extends KeywordToken  {
	
	public Query_CommaKeyword_9_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getCommaKeyword_9_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_Group_9(parent, this, 0, inst);
			case 1: return new Query_ParametersAssignment_8(parent, this, 1, inst);
			case 2: return new Query_LeftParenthesisKeyword_7(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// parameters+=QueryParameter
protected class Query_ParametersAssignment_9_1 extends AssignmentToken  {
	
	public Query_ParametersAssignment_9_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryAccess().getParametersAssignment_9_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryParameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("parameters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQueryParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getQueryAccess().getParametersQueryParameterParserRuleCall_9_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Query_CommaKeyword_9_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class Query_RightParenthesisKeyword_10 extends KeywordToken  {
	
	public Query_RightParenthesisKeyword_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getRightParenthesisKeyword_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_Group_9(parent, this, 0, inst);
			case 1: return new Query_ParametersAssignment_8(parent, this, 1, inst);
			case 2: return new Query_LeftParenthesisKeyword_7(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "{"
protected class Query_LeftCurlyBracketKeyword_11 extends KeywordToken  {
	
	public Query_LeftCurlyBracketKeyword_11(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getLeftCurlyBracketKeyword_11();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_RightParenthesisKeyword_10(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// filters+=QueryFilter*
protected class Query_FiltersAssignment_12 extends AssignmentToken  {
	
	public Query_FiltersAssignment_12(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryAccess().getFiltersAssignment_12();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryFilter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("filters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("filters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQueryFilterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getQueryAccess().getFiltersQueryFilterParserRuleCall_12_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Query_FiltersAssignment_12(parent, next, actIndex, consumed);
			case 1: return new Query_LeftCurlyBracketKeyword_11(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("-max" "(" max=INT ")")?
protected class Query_Group_13 extends GroupToken {
	
	public Query_Group_13(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getQueryAccess().getGroup_13();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_RightParenthesisKeyword_13_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "-max"
protected class Query_MaxKeyword_13_0 extends KeywordToken  {
	
	public Query_MaxKeyword_13_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getMaxKeyword_13_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_FiltersAssignment_12(parent, this, 0, inst);
			case 1: return new Query_LeftCurlyBracketKeyword_11(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class Query_LeftParenthesisKeyword_13_1 extends KeywordToken  {
	
	public Query_LeftParenthesisKeyword_13_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getLeftParenthesisKeyword_13_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_MaxKeyword_13_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// max=INT
protected class Query_MaxAssignment_13_2 extends AssignmentToken  {
	
	public Query_MaxAssignment_13_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryAccess().getMaxAssignment_13_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_LeftParenthesisKeyword_13_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("max",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("max");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getQueryAccess().getMaxINTTerminalRuleCall_13_2_0();
			return obj;
		}
		return null;
	}

}

// ")"
protected class Query_RightParenthesisKeyword_13_3 extends KeywordToken  {
	
	public Query_RightParenthesisKeyword_13_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getRightParenthesisKeyword_13_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_MaxAssignment_13_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("-offset" "(" offset=INT ")")?
protected class Query_Group_14 extends GroupToken {
	
	public Query_Group_14(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getQueryAccess().getGroup_14();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_RightParenthesisKeyword_14_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "-offset"
protected class Query_OffsetKeyword_14_0 extends KeywordToken  {
	
	public Query_OffsetKeyword_14_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getOffsetKeyword_14_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_Group_13(parent, this, 0, inst);
			case 1: return new Query_FiltersAssignment_12(parent, this, 1, inst);
			case 2: return new Query_LeftCurlyBracketKeyword_11(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class Query_LeftParenthesisKeyword_14_1 extends KeywordToken  {
	
	public Query_LeftParenthesisKeyword_14_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getLeftParenthesisKeyword_14_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_OffsetKeyword_14_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// offset=INT
protected class Query_OffsetAssignment_14_2 extends AssignmentToken  {
	
	public Query_OffsetAssignment_14_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryAccess().getOffsetAssignment_14_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_LeftParenthesisKeyword_14_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("offset",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("offset");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getQueryAccess().getOffsetINTTerminalRuleCall_14_2_0();
			return obj;
		}
		return null;
	}

}

// ")"
protected class Query_RightParenthesisKeyword_14_3 extends KeywordToken  {
	
	public Query_RightParenthesisKeyword_14_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getRightParenthesisKeyword_14_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_OffsetAssignment_14_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// ("-order" "(" orders+=QueryOrder? ("," orders+=QueryOrder)* ")")?
protected class Query_Group_15 extends GroupToken {
	
	public Query_Group_15(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getQueryAccess().getGroup_15();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_RightParenthesisKeyword_15_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "-order"
protected class Query_OrderKeyword_15_0 extends KeywordToken  {
	
	public Query_OrderKeyword_15_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getOrderKeyword_15_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_Group_14(parent, this, 0, inst);
			case 1: return new Query_Group_13(parent, this, 1, inst);
			case 2: return new Query_FiltersAssignment_12(parent, this, 2, inst);
			case 3: return new Query_LeftCurlyBracketKeyword_11(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class Query_LeftParenthesisKeyword_15_1 extends KeywordToken  {
	
	public Query_LeftParenthesisKeyword_15_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getLeftParenthesisKeyword_15_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_OrderKeyword_15_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// orders+=QueryOrder?
protected class Query_OrdersAssignment_15_2 extends AssignmentToken  {
	
	public Query_OrdersAssignment_15_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryAccess().getOrdersAssignment_15_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryOrder_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("orders",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("orders");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQueryOrderRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getQueryAccess().getOrdersQueryOrderParserRuleCall_15_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Query_LeftParenthesisKeyword_15_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," orders+=QueryOrder)*
protected class Query_Group_15_3 extends GroupToken {
	
	public Query_Group_15_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getQueryAccess().getGroup_15_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_OrdersAssignment_15_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Query_CommaKeyword_15_3_0 extends KeywordToken  {
	
	public Query_CommaKeyword_15_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getCommaKeyword_15_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_Group_15_3(parent, this, 0, inst);
			case 1: return new Query_OrdersAssignment_15_2(parent, this, 1, inst);
			case 2: return new Query_LeftParenthesisKeyword_15_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// orders+=QueryOrder
protected class Query_OrdersAssignment_15_3_1 extends AssignmentToken  {
	
	public Query_OrdersAssignment_15_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryAccess().getOrdersAssignment_15_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryOrder_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("orders",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("orders");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQueryOrderRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getQueryAccess().getOrdersQueryOrderParserRuleCall_15_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Query_CommaKeyword_15_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class Query_RightParenthesisKeyword_15_4 extends KeywordToken  {
	
	public Query_RightParenthesisKeyword_15_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getRightParenthesisKeyword_15_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_Group_15_3(parent, this, 0, inst);
			case 1: return new Query_OrdersAssignment_15_2(parent, this, 1, inst);
			case 2: return new Query_LeftParenthesisKeyword_15_1(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}


// "}"
protected class Query_RightCurlyBracketKeyword_16 extends KeywordToken  {
	
	public Query_RightCurlyBracketKeyword_16(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryAccess().getRightCurlyBracketKeyword_16();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Query_Group_15(parent, this, 0, inst);
			case 1: return new Query_Group_14(parent, this, 1, inst);
			case 2: return new Query_Group_13(parent, this, 2, inst);
			case 3: return new Query_FiltersAssignment_12(parent, this, 3, inst);
			case 4: return new Query_LeftCurlyBracketKeyword_11(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Query ****************/


/************ begin Rule QueryParameter ****************
 *
 * QueryParameter:
 *   type=[Type] name=ID;
 *
 **/

// type=[Type] name=ID
protected class QueryParameter_Group extends GroupToken {
	
	public QueryParameter_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getQueryParameterAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryParameter_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getQueryParameterRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// type=[Type]
protected class QueryParameter_TypeAssignment_0 extends AssignmentToken  {
	
	public QueryParameter_TypeAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryParameterAccess().getTypeAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQueryParameterAccess().getTypeTypeCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getQueryParameterAccess().getTypeTypeCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// name=ID
protected class QueryParameter_NameAssignment_1 extends AssignmentToken  {
	
	public QueryParameter_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryParameterAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryParameter_TypeAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getQueryParameterAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule QueryParameter ****************/


/************ begin Rule QueryFilter ****************
 *
 * QueryFilter:
 *   entity=[Entity]? "." attribute=[Attribute] "=" value=[QueryParameter];
 *
 **/

// entity=[Entity]? "." attribute=[Attribute] "=" value=[QueryParameter]
protected class QueryFilter_Group extends GroupToken {
	
	public QueryFilter_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getQueryFilterAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryFilter_ValueAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getQueryFilterRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// entity=[Entity]?
protected class QueryFilter_EntityAssignment_0 extends AssignmentToken  {
	
	public QueryFilter_EntityAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryFilterAccess().getEntityAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("entity",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("entity");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQueryFilterAccess().getEntityEntityCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getQueryFilterAccess().getEntityEntityCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "."
protected class QueryFilter_FullStopKeyword_1 extends KeywordToken  {
	
	public QueryFilter_FullStopKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryFilterAccess().getFullStopKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryFilter_EntityAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// attribute=[Attribute]
protected class QueryFilter_AttributeAssignment_2 extends AssignmentToken  {
	
	public QueryFilter_AttributeAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryFilterAccess().getAttributeAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryFilter_FullStopKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("attribute",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("attribute");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQueryFilterAccess().getAttributeAttributeCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getQueryFilterAccess().getAttributeAttributeCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "="
protected class QueryFilter_EqualsSignKeyword_3 extends KeywordToken  {
	
	public QueryFilter_EqualsSignKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryFilterAccess().getEqualsSignKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryFilter_AttributeAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=[QueryParameter]
protected class QueryFilter_ValueAssignment_4 extends AssignmentToken  {
	
	public QueryFilter_ValueAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryFilterAccess().getValueAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryFilter_EqualsSignKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQueryFilterAccess().getValueQueryParameterCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getQueryFilterAccess().getValueQueryParameterCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule QueryFilter ****************/


/************ begin Rule QueryOrder ****************
 *
 * QueryOrder:
 *   entity=[Entity]? "." attribute=[Attribute] type=QueryOrderType?;
 *
 **/

// entity=[Entity]? "." attribute=[Attribute] type=QueryOrderType?
protected class QueryOrder_Group extends GroupToken {
	
	public QueryOrder_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getQueryOrderAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryOrder_TypeAssignment_3(parent, this, 0, inst);
			case 1: return new QueryOrder_AttributeAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getQueryOrderRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// entity=[Entity]?
protected class QueryOrder_EntityAssignment_0 extends AssignmentToken  {
	
	public QueryOrder_EntityAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryOrderAccess().getEntityAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("entity",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("entity");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQueryOrderAccess().getEntityEntityCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getQueryOrderAccess().getEntityEntityCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "."
protected class QueryOrder_FullStopKeyword_1 extends KeywordToken  {
	
	public QueryOrder_FullStopKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getQueryOrderAccess().getFullStopKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryOrder_EntityAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// attribute=[Attribute]
protected class QueryOrder_AttributeAssignment_2 extends AssignmentToken  {
	
	public QueryOrder_AttributeAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryOrderAccess().getAttributeAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryOrder_FullStopKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("attribute",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("attribute");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getQueryOrderAccess().getAttributeAttributeCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getQueryOrderAccess().getAttributeAttributeCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// type=QueryOrderType?
protected class QueryOrder_TypeAssignment_3 extends AssignmentToken  {
	
	public QueryOrder_TypeAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getQueryOrderAccess().getTypeAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new QueryOrder_AttributeAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getQueryOrderAccess().getTypeQueryOrderTypeEnumRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule QueryOrder ****************/

}
